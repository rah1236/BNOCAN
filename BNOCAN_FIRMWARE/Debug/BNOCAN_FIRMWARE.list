
BNOCAN_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b08  08004b08  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004b08  08004b08  00005b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b10  08004b10  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004b18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000068  08004b80  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004b80  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d657  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0a  00000000  00000000  000136e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000155f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8d  00000000  00000000  00016380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b19  00000000  00000000  00016e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e83e  00000000  00000000  0002f926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8ec  00000000  00000000  0003e164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cca50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004118  00000000  00000000  000cca94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d0bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a7c 	.word	0x08004a7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004a7c 	.word	0x08004a7c

0800014c <__aeabi_uldivmod>:
 800014c:	b953      	cbnz	r3, 8000164 <__aeabi_uldivmod+0x18>
 800014e:	b94a      	cbnz	r2, 8000164 <__aeabi_uldivmod+0x18>
 8000150:	2900      	cmp	r1, #0
 8000152:	bf08      	it	eq
 8000154:	2800      	cmpeq	r0, #0
 8000156:	bf1c      	itt	ne
 8000158:	f04f 31ff 	movne.w	r1, #4294967295
 800015c:	f04f 30ff 	movne.w	r0, #4294967295
 8000160:	f000 b968 	b.w	8000434 <__aeabi_idiv0>
 8000164:	f1ad 0c08 	sub.w	ip, sp, #8
 8000168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800016c:	f000 f806 	bl	800017c <__udivmoddi4>
 8000170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000178:	b004      	add	sp, #16
 800017a:	4770      	bx	lr

0800017c <__udivmoddi4>:
 800017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000180:	9d08      	ldr	r5, [sp, #32]
 8000182:	460c      	mov	r4, r1
 8000184:	2b00      	cmp	r3, #0
 8000186:	d14e      	bne.n	8000226 <__udivmoddi4+0xaa>
 8000188:	4694      	mov	ip, r2
 800018a:	458c      	cmp	ip, r1
 800018c:	4686      	mov	lr, r0
 800018e:	fab2 f282 	clz	r2, r2
 8000192:	d962      	bls.n	800025a <__udivmoddi4+0xde>
 8000194:	b14a      	cbz	r2, 80001aa <__udivmoddi4+0x2e>
 8000196:	f1c2 0320 	rsb	r3, r2, #32
 800019a:	4091      	lsls	r1, r2
 800019c:	fa20 f303 	lsr.w	r3, r0, r3
 80001a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a4:	4319      	orrs	r1, r3
 80001a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80001b2:	fb07 1114 	mls	r1, r7, r4, r1
 80001b6:	fa1f f68c 	uxth.w	r6, ip
 80001ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001c2:	fb04 f106 	mul.w	r1, r4, r6
 80001c6:	4299      	cmp	r1, r3
 80001c8:	d90a      	bls.n	80001e0 <__udivmoddi4+0x64>
 80001ca:	eb1c 0303 	adds.w	r3, ip, r3
 80001ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80001d2:	f080 8110 	bcs.w	80003f6 <__udivmoddi4+0x27a>
 80001d6:	4299      	cmp	r1, r3
 80001d8:	f240 810d 	bls.w	80003f6 <__udivmoddi4+0x27a>
 80001dc:	3c02      	subs	r4, #2
 80001de:	4463      	add	r3, ip
 80001e0:	1a59      	subs	r1, r3, r1
 80001e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80001e6:	fb07 1110 	mls	r1, r7, r0, r1
 80001ea:	fb00 f606 	mul.w	r6, r0, r6
 80001ee:	fa1f f38e 	uxth.w	r3, lr
 80001f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f6:	429e      	cmp	r6, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x94>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000202:	f080 80fa 	bcs.w	80003fa <__udivmoddi4+0x27e>
 8000206:	429e      	cmp	r6, r3
 8000208:	f240 80f7 	bls.w	80003fa <__udivmoddi4+0x27e>
 800020c:	4463      	add	r3, ip
 800020e:	3802      	subs	r0, #2
 8000210:	2100      	movs	r1, #0
 8000212:	1b9b      	subs	r3, r3, r6
 8000214:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000218:	b11d      	cbz	r5, 8000222 <__udivmoddi4+0xa6>
 800021a:	40d3      	lsrs	r3, r2
 800021c:	2200      	movs	r2, #0
 800021e:	e9c5 3200 	strd	r3, r2, [r5]
 8000222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000226:	428b      	cmp	r3, r1
 8000228:	d905      	bls.n	8000236 <__udivmoddi4+0xba>
 800022a:	b10d      	cbz	r5, 8000230 <__udivmoddi4+0xb4>
 800022c:	e9c5 0100 	strd	r0, r1, [r5]
 8000230:	2100      	movs	r1, #0
 8000232:	4608      	mov	r0, r1
 8000234:	e7f5      	b.n	8000222 <__udivmoddi4+0xa6>
 8000236:	fab3 f183 	clz	r1, r3
 800023a:	2900      	cmp	r1, #0
 800023c:	d146      	bne.n	80002cc <__udivmoddi4+0x150>
 800023e:	42a3      	cmp	r3, r4
 8000240:	d302      	bcc.n	8000248 <__udivmoddi4+0xcc>
 8000242:	4290      	cmp	r0, r2
 8000244:	f0c0 80ee 	bcc.w	8000424 <__udivmoddi4+0x2a8>
 8000248:	1a86      	subs	r6, r0, r2
 800024a:	eb64 0303 	sbc.w	r3, r4, r3
 800024e:	2001      	movs	r0, #1
 8000250:	2d00      	cmp	r5, #0
 8000252:	d0e6      	beq.n	8000222 <__udivmoddi4+0xa6>
 8000254:	e9c5 6300 	strd	r6, r3, [r5]
 8000258:	e7e3      	b.n	8000222 <__udivmoddi4+0xa6>
 800025a:	2a00      	cmp	r2, #0
 800025c:	f040 808f 	bne.w	800037e <__udivmoddi4+0x202>
 8000260:	eba1 040c 	sub.w	r4, r1, ip
 8000264:	2101      	movs	r1, #1
 8000266:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000272:	fb08 4416 	mls	r4, r8, r6, r4
 8000276:	fb07 f006 	mul.w	r0, r7, r6
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000282:	4298      	cmp	r0, r3
 8000284:	d908      	bls.n	8000298 <__udivmoddi4+0x11c>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 34ff 	add.w	r4, r6, #4294967295
 800028e:	d202      	bcs.n	8000296 <__udivmoddi4+0x11a>
 8000290:	4298      	cmp	r0, r3
 8000292:	f200 80cb 	bhi.w	800042c <__udivmoddi4+0x2b0>
 8000296:	4626      	mov	r6, r4
 8000298:	1a1c      	subs	r4, r3, r0
 800029a:	fbb4 f0f8 	udiv	r0, r4, r8
 800029e:	fb08 4410 	mls	r4, r8, r0, r4
 80002a2:	fb00 f707 	mul.w	r7, r0, r7
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	429f      	cmp	r7, r3
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0x148>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x146>
 80002bc:	429f      	cmp	r7, r3
 80002be:	f200 80ae 	bhi.w	800041e <__udivmoddi4+0x2a2>
 80002c2:	4620      	mov	r0, r4
 80002c4:	1bdb      	subs	r3, r3, r7
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	e7a5      	b.n	8000218 <__udivmoddi4+0x9c>
 80002cc:	f1c1 0720 	rsb	r7, r1, #32
 80002d0:	408b      	lsls	r3, r1
 80002d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80002d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80002da:	fa24 f607 	lsr.w	r6, r4, r7
 80002de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e2:	fbb6 f8f9 	udiv	r8, r6, r9
 80002e6:	fa1f fe8c 	uxth.w	lr, ip
 80002ea:	fb09 6618 	mls	r6, r9, r8, r6
 80002ee:	fa20 f307 	lsr.w	r3, r0, r7
 80002f2:	408c      	lsls	r4, r1
 80002f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80002f8:	fb08 f00e 	mul.w	r0, r8, lr
 80002fc:	431c      	orrs	r4, r3
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000304:	4298      	cmp	r0, r3
 8000306:	fa02 f201 	lsl.w	r2, r2, r1
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x1a6>
 800030c:	eb1c 0303 	adds.w	r3, ip, r3
 8000310:	f108 36ff 	add.w	r6, r8, #4294967295
 8000314:	f080 8081 	bcs.w	800041a <__udivmoddi4+0x29e>
 8000318:	4298      	cmp	r0, r3
 800031a:	d97e      	bls.n	800041a <__udivmoddi4+0x29e>
 800031c:	f1a8 0802 	sub.w	r8, r8, #2
 8000320:	4463      	add	r3, ip
 8000322:	1a1e      	subs	r6, r3, r0
 8000324:	fbb6 f3f9 	udiv	r3, r6, r9
 8000328:	fb09 6613 	mls	r6, r9, r3, r6
 800032c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000330:	b2a4      	uxth	r4, r4
 8000332:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000336:	45a6      	cmp	lr, r4
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x1d0>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000342:	d266      	bcs.n	8000412 <__udivmoddi4+0x296>
 8000344:	45a6      	cmp	lr, r4
 8000346:	d964      	bls.n	8000412 <__udivmoddi4+0x296>
 8000348:	3b02      	subs	r3, #2
 800034a:	4464      	add	r4, ip
 800034c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000350:	fba0 8302 	umull	r8, r3, r0, r2
 8000354:	eba4 040e 	sub.w	r4, r4, lr
 8000358:	429c      	cmp	r4, r3
 800035a:	46c6      	mov	lr, r8
 800035c:	461e      	mov	r6, r3
 800035e:	d350      	bcc.n	8000402 <__udivmoddi4+0x286>
 8000360:	d04d      	beq.n	80003fe <__udivmoddi4+0x282>
 8000362:	b155      	cbz	r5, 800037a <__udivmoddi4+0x1fe>
 8000364:	ebba 030e 	subs.w	r3, sl, lr
 8000368:	eb64 0406 	sbc.w	r4, r4, r6
 800036c:	fa04 f707 	lsl.w	r7, r4, r7
 8000370:	40cb      	lsrs	r3, r1
 8000372:	431f      	orrs	r7, r3
 8000374:	40cc      	lsrs	r4, r1
 8000376:	e9c5 7400 	strd	r7, r4, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	e751      	b.n	8000222 <__udivmoddi4+0xa6>
 800037e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000382:	f1c2 0320 	rsb	r3, r2, #32
 8000386:	40d9      	lsrs	r1, r3
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa20 f303 	lsr.w	r3, r0, r3
 8000390:	fa00 fe02 	lsl.w	lr, r0, r2
 8000394:	fbb1 f0f8 	udiv	r0, r1, r8
 8000398:	fb08 1110 	mls	r1, r8, r0, r1
 800039c:	4094      	lsls	r4, r2
 800039e:	431c      	orrs	r4, r3
 80003a0:	fa1f f78c 	uxth.w	r7, ip
 80003a4:	0c23      	lsrs	r3, r4, #16
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f107 	mul.w	r1, r0, r7
 80003ae:	4299      	cmp	r1, r3
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x248>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ba:	d22c      	bcs.n	8000416 <__udivmoddi4+0x29a>
 80003bc:	4299      	cmp	r1, r3
 80003be:	d92a      	bls.n	8000416 <__udivmoddi4+0x29a>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003ca:	fb08 3311 	mls	r3, r8, r1, r3
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb01 f307 	mul.w	r3, r1, r7
 80003d8:	42a3      	cmp	r3, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x272>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80003e4:	d213      	bcs.n	800040e <__udivmoddi4+0x292>
 80003e6:	42a3      	cmp	r3, r4
 80003e8:	d911      	bls.n	800040e <__udivmoddi4+0x292>
 80003ea:	3902      	subs	r1, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	1ae4      	subs	r4, r4, r3
 80003f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f4:	e73b      	b.n	800026e <__udivmoddi4+0xf2>
 80003f6:	4604      	mov	r4, r0
 80003f8:	e6f2      	b.n	80001e0 <__udivmoddi4+0x64>
 80003fa:	4608      	mov	r0, r1
 80003fc:	e708      	b.n	8000210 <__udivmoddi4+0x94>
 80003fe:	45c2      	cmp	sl, r8
 8000400:	d2af      	bcs.n	8000362 <__udivmoddi4+0x1e6>
 8000402:	ebb8 0e02 	subs.w	lr, r8, r2
 8000406:	eb63 060c 	sbc.w	r6, r3, ip
 800040a:	3801      	subs	r0, #1
 800040c:	e7a9      	b.n	8000362 <__udivmoddi4+0x1e6>
 800040e:	4631      	mov	r1, r6
 8000410:	e7ed      	b.n	80003ee <__udivmoddi4+0x272>
 8000412:	4603      	mov	r3, r0
 8000414:	e79a      	b.n	800034c <__udivmoddi4+0x1d0>
 8000416:	4630      	mov	r0, r6
 8000418:	e7d4      	b.n	80003c4 <__udivmoddi4+0x248>
 800041a:	46b0      	mov	r8, r6
 800041c:	e781      	b.n	8000322 <__udivmoddi4+0x1a6>
 800041e:	4463      	add	r3, ip
 8000420:	3802      	subs	r0, #2
 8000422:	e74f      	b.n	80002c4 <__udivmoddi4+0x148>
 8000424:	4606      	mov	r6, r0
 8000426:	4623      	mov	r3, r4
 8000428:	4608      	mov	r0, r1
 800042a:	e711      	b.n	8000250 <__udivmoddi4+0xd4>
 800042c:	3e02      	subs	r6, #2
 800042e:	4463      	add	r3, ip
 8000430:	e732      	b.n	8000298 <__udivmoddi4+0x11c>
 8000432:	bf00      	nop

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop

08000438 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000440:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000444:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	2b00      	cmp	r3, #0
 800044e:	d013      	beq.n	8000478 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000450:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000454:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000458:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800045c:	2b00      	cmp	r3, #0
 800045e:	d00b      	beq.n	8000478 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000460:	e000      	b.n	8000464 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000462:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000464:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f9      	beq.n	8000462 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800046e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	b2d2      	uxtb	r2, r2
 8000476:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000478:	687b      	ldr	r3, [r7, #4]
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <HAL_CAN_RxFifo0MsgPendingCallback>:
#define PACKET_PREFIX 0xAAAA


//Upon receiving a CAN message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	//Get a CAN frame from the Rx FIFO zone into the message RAM.
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800048c:	4b04      	ldr	r3, [pc, #16]	@ (80004a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800048e:	4a05      	ldr	r2, [pc, #20]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000490:	2100      	movs	r1, #0
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f001 f9d5 	bl	8001842 <HAL_CAN_GetRxMessage>
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000184 	.word	0x20000184
 80004a4:	20000154 	.word	0x20000154

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004ac:	b0af      	sub	sp, #188	@ 0xbc
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fe6a 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 fa80 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 fbc2 	bl	8000c40 <MX_GPIO_Init>
  MX_CAN_Init();
 80004bc:	f000 fac2 	bl	8000a44 <MX_CAN_Init>
  MX_TIM2_Init();
 80004c0:	f000 fb14 	bl	8000aec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004c4:	f000 fb92 	bl	8000bec <MX_USART1_UART_Init>

  /* Set the Protocol Select lines for the BNO085,
   * PS1 LOW and PS0 HIGH on boot sets the IMU to RVC (Robot Vacuum Cleaner)
   * mode. Which streams all data through the UART bus. Read the data sheet for more information.
   */
  HAL_GPIO_WritePin(GPIOB, PS1_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2104      	movs	r1, #4
 80004cc:	481d      	ldr	r0, [pc, #116]	@ (8000544 <main+0x9c>)
 80004ce:	f001 ffbf 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PS0_WAKE_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2102      	movs	r1, #2
 80004d6:	481b      	ldr	r0, [pc, #108]	@ (8000544 <main+0x9c>)
 80004d8:	f001 ffba 	bl	8002450 <HAL_GPIO_WritePin>

  //Start the CAN peripheral
  HAL_CAN_Start(&hcan);
 80004dc:	481a      	ldr	r0, [pc, #104]	@ (8000548 <main+0xa0>)
 80004de:	f001 f89d 	bl	800161c <HAL_CAN_Start>
  //Enable interrupts upon receiving CAN messages
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004e2:	2102      	movs	r1, #2
 80004e4:	4818      	ldr	r0, [pc, #96]	@ (8000548 <main+0xa0>)
 80004e6:	f001 facd 	bl	8001a84 <HAL_CAN_ActivateNotification>


  //Turn on Green LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //GREEN LED or D3
 80004ea:	2108      	movs	r1, #8
 80004ec:	4817      	ldr	r0, [pc, #92]	@ (800054c <main+0xa4>)
 80004ee:	f002 fc7f 	bl	8002df0 <HAL_TIM_PWM_Start>


  //Define CAN TX header
  TxHeader.DLC = 2;
 80004f2:	4a17      	ldr	r2, [pc, #92]	@ (8000550 <main+0xa8>)
 80004f4:	2302      	movs	r3, #2
 80004f6:	6113      	str	r3, [r2, #16]
  TxHeader.ExtId = 0;
 80004f8:	4a15      	ldr	r2, [pc, #84]	@ (8000550 <main+0xa8>)
 80004fa:	2300      	movs	r3, #0
 80004fc:	6053      	str	r3, [r2, #4]
  TxHeader.IDE = CAN_ID_STD;
 80004fe:	4a14      	ldr	r2, [pc, #80]	@ (8000550 <main+0xa8>)
 8000500:	2300      	movs	r3, #0
 8000502:	6093      	str	r3, [r2, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000504:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <main+0xa8>)
 8000506:	2300      	movs	r3, #0
 8000508:	60d3      	str	r3, [r2, #12]
  TxHeader.StdId = 0x111;
 800050a:	4a11      	ldr	r2, [pc, #68]	@ (8000550 <main+0xa8>)
 800050c:	f240 1311 	movw	r3, #273	@ 0x111
 8000510:	6013      	str	r3, [r2, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000512:	4a0f      	ldr	r2, [pc, #60]	@ (8000550 <main+0xa8>)
 8000514:	2300      	movs	r3, #0
 8000516:	7513      	strb	r3, [r2, #20]

  //Define CAN TX Data
  TxData[0] = 0x01;
 8000518:	4a0e      	ldr	r2, [pc, #56]	@ (8000554 <main+0xac>)
 800051a:	2301      	movs	r3, #1
 800051c:	7013      	strb	r3, [r2, #0]
  TxData[1] = 0x02;
 800051e:	4a0d      	ldr	r2, [pc, #52]	@ (8000554 <main+0xac>)
 8000520:	2302      	movs	r3, #2
 8000522:	7053      	strb	r3, [r2, #1]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //Begin reading the UART buffer
	  if(HAL_UART_Receive(&huart1, uartRxData, 19, 1000) == HAL_OK)
 8000524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000528:	2213      	movs	r2, #19
 800052a:	490b      	ldr	r1, [pc, #44]	@ (8000558 <main+0xb0>)
 800052c:	480b      	ldr	r0, [pc, #44]	@ (800055c <main+0xb4>)
 800052e:	f003 f9dd 	bl	80038ec <HAL_UART_Receive>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	f040 822e 	bne.w	8000996 <main+0x4ee>
	  {
		  //For the first 19 bytes
		  for(int i = 0; i < 19; i++)
 800053a:	2300      	movs	r3, #0
 800053c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000540:	e033      	b.n	80005aa <main+0x102>
 8000542:	bf00      	nop
 8000544:	40010c00 	.word	0x40010c00
 8000548:	20000084 	.word	0x20000084
 800054c:	200000ac 	.word	0x200000ac
 8000550:	2000013c 	.word	0x2000013c
 8000554:	2000017c 	.word	0x2000017c
 8000558:	2000018c 	.word	0x2000018c
 800055c:	200000f4 	.word	0x200000f4
		  {
			// Check if this particular set of bytes matches the expected value
			  uint16_t prefix = (uartRxData[i] << 8) | uartRxData[i+1];
 8000560:	4ac1      	ldr	r2, [pc, #772]	@ (8000868 <main+0x3c0>)
 8000562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	b219      	sxth	r1, r3
 800056e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	4bbc      	ldr	r3, [pc, #752]	@ (8000868 <main+0x3c0>)
 8000576:	5c9b      	ldrb	r3, [r3, r2]
 8000578:	b21b      	sxth	r3, r3
 800057a:	430b      	orrs	r3, r1
 800057c:	b21b      	sxth	r3, r3
 800057e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
			  if(prefix == PACKET_PREFIX)
 8000582:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8000586:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 800058a:	429a      	cmp	r2, r3
 800058c:	d108      	bne.n	80005a0 <main+0xf8>
			  {
				  //note that this is the index to start at
				  indexedArrayIndex = i;
 800058e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4ab5      	ldr	r2, [pc, #724]	@ (800086c <main+0x3c4>)
 8000596:	7013      	strb	r3, [r2, #0]

				  //exit the loop
				  i = 0xFFFF;
 8000598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		  for(int i = 0; i < 19; i++)
 80005a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80005a4:	3301      	adds	r3, #1
 80005a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80005aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80005ae:	2b12      	cmp	r3, #18
 80005b0:	ddd6      	ble.n	8000560 <main+0xb8>
			  }
		  }

		  // Set the CAN data to send to be equal to the YAW sent by the BNO085
		  // See part 1.2.5.2 in the BNO085 data sheet for more information
		  peepee = REVERSE_BITS(uartRxData[indexedArrayIndex + 3]) + (REVERSE_BITS(uartRxData[indexedArrayIndex + 4]) << 8);
 80005b2:	4bae      	ldr	r3, [pc, #696]	@ (800086c <main+0x3c4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	1cda      	adds	r2, r3, #3
 80005b8:	4bab      	ldr	r3, [pc, #684]	@ (8000868 <main+0x3c0>)
 80005ba:	5c9b      	ldrb	r3, [r3, r2]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2200      	movs	r2, #0
 80005c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80005c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80005c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80005c8:	f04f 0000 	mov.w	r0, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	0219      	lsls	r1, r3, #8
 80005d2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80005d6:	0210      	lsls	r0, r2, #8
 80005d8:	4602      	mov	r2, r0
 80005da:	460b      	mov	r3, r1
 80005dc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80005de:	1851      	adds	r1, r2, r1
 80005e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80005e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80005e4:	414b      	adcs	r3, r1
 80005e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80005e8:	f04f 0200 	mov.w	r2, #0
 80005ec:	f04f 0300 	mov.w	r3, #0
 80005f0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80005f2:	040b      	lsls	r3, r1, #16
 80005f4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80005f8:	4606      	mov	r6, r0
 80005fa:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80005fe:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8000602:	4601      	mov	r1, r0
 8000604:	040a      	lsls	r2, r1, #16
 8000606:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800060a:	4606      	mov	r6, r0
 800060c:	eb16 0802 	adds.w	r8, r6, r2
 8000610:	eb41 0903 	adc.w	r9, r1, r3
 8000614:	f04f 0200 	mov.w	r2, #0
 8000618:	f04f 0300 	mov.w	r3, #0
 800061c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8000620:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8000624:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8000628:	4690      	mov	r8, r2
 800062a:	4699      	mov	r9, r3
 800062c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000630:	4611      	mov	r1, r2
 8000632:	eb18 0101 	adds.w	r1, r8, r1
 8000636:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000638:	eb49 0303 	adc.w	r3, r9, r3
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800063e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8000642:	460b      	mov	r3, r1
 8000644:	18db      	adds	r3, r3, r3
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	4613      	mov	r3, r2
 800064a:	eb42 0303 	adc.w	r3, r2, r3
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000654:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000658:	f022 41f7 	bic.w	r1, r2, #2071986176	@ 0x7b800000
 800065c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8000660:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8000664:	f421 1177 	bic.w	r1, r1, #4046848	@ 0x3dc000
 8000668:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800066c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8000670:	f421 51ff 	bic.w	r1, r1, #8160	@ 0x1fe0
 8000674:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8000678:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800067c:	f021 010f 	bic.w	r1, r1, #15
 8000680:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8000684:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 8000688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800068c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000690:	f04f 0300 	mov.w	r3, #0
 8000694:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8000698:	f7ff fd58 	bl	800014c <__aeabi_uldivmod>
 800069c:	4616      	mov	r6, r2
 800069e:	4b73      	ldr	r3, [pc, #460]	@ (800086c <main+0x3c4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	1d1a      	adds	r2, r3, #4
 80006a4:	4b70      	ldr	r3, [pc, #448]	@ (8000868 <main+0x3c0>)
 80006a6:	5c9b      	ldrb	r3, [r3, r2]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2200      	movs	r2, #0
 80006ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80006ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80006b0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80006b4:	f04f 0000 	mov.w	r0, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	0219      	lsls	r1, r3, #8
 80006be:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80006c2:	0210      	lsls	r0, r2, #8
 80006c4:	4602      	mov	r2, r0
 80006c6:	460b      	mov	r3, r1
 80006c8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80006ca:	1851      	adds	r1, r2, r1
 80006cc:	6539      	str	r1, [r7, #80]	@ 0x50
 80006ce:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80006d0:	414b      	adcs	r3, r1
 80006d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80006d4:	f04f 0200 	mov.w	r2, #0
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80006de:	040b      	lsls	r3, r1, #16
 80006e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80006e4:	4684      	mov	ip, r0
 80006e6:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80006ea:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 80006ee:	4601      	mov	r1, r0
 80006f0:	040a      	lsls	r2, r1, #16
 80006f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80006f6:	4684      	mov	ip, r0
 80006f8:	eb1c 0a02 	adds.w	sl, ip, r2
 80006fc:	eb41 0b03 	adc.w	fp, r1, r3
 8000700:	f04f 0200 	mov.w	r2, #0
 8000704:	f04f 0300 	mov.w	r3, #0
 8000708:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800070c:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8000710:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8000714:	4692      	mov	sl, r2
 8000716:	469b      	mov	fp, r3
 8000718:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800071c:	4611      	mov	r1, r2
 800071e:	eb1a 0101 	adds.w	r1, sl, r1
 8000722:	6339      	str	r1, [r7, #48]	@ 0x30
 8000724:	eb4b 0303 	adc.w	r3, fp, r3
 8000728:	637b      	str	r3, [r7, #52]	@ 0x34
 800072a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800072e:	460b      	mov	r3, r1
 8000730:	18db      	adds	r3, r3, r3
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	4613      	mov	r3, r2
 8000736:	eb42 0303 	adc.w	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000740:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000744:	f022 41f7 	bic.w	r1, r2, #2071986176	@ 0x7b800000
 8000748:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800074c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000750:	f421 1177 	bic.w	r1, r1, #4046848	@ 0x3dc000
 8000754:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8000758:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800075c:	f421 51ff 	bic.w	r1, r1, #8160	@ 0x1fe0
 8000760:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8000764:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000768:	f021 010f 	bic.w	r1, r1, #15
 800076c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8000770:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 8000774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000778:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8000784:	f7ff fce2 	bl	800014c <__aeabi_uldivmod>
 8000788:	4613      	mov	r3, r2
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	4433      	add	r3, r6
 800078e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0



		  //printf("Mailbox before send = %X\n", HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
		  //TxData = peepee;
		  TxData[0] = REVERSE_BITS(uartRxData[indexedArrayIndex + 3]);
 8000792:	4b36      	ldr	r3, [pc, #216]	@ (800086c <main+0x3c4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	1cda      	adds	r2, r3, #3
 8000798:	4b33      	ldr	r3, [pc, #204]	@ (8000868 <main+0x3c0>)
 800079a:	5c9b      	ldrb	r3, [r3, r2]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2200      	movs	r2, #0
 80007a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80007a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80007a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	f04f 0100 	mov.w	r1, #0
 80007b0:	0219      	lsls	r1, r3, #8
 80007b2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80007b6:	0210      	lsls	r0, r2, #8
 80007b8:	4602      	mov	r2, r0
 80007ba:	460b      	mov	r3, r1
 80007bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80007be:	1851      	adds	r1, r2, r1
 80007c0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80007c4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80007c6:	414b      	adcs	r3, r1
 80007c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80007d8:	040b      	lsls	r3, r1, #16
 80007da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80007de:	4606      	mov	r6, r0
 80007e0:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80007e4:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88
 80007e8:	4601      	mov	r1, r0
 80007ea:	040a      	lsls	r2, r1, #16
 80007ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80007f0:	1889      	adds	r1, r1, r2
 80007f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80007f4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80007f8:	eb41 0303 	adc.w	r3, r1, r3
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	f04f 0300 	mov.w	r3, #0
 8000806:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000808:	020b      	lsls	r3, r1, #8
 800080a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800080e:	4606      	mov	r6, r0
 8000810:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8000814:	4601      	mov	r1, r0
 8000816:	020a      	lsls	r2, r1, #8
 8000818:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800081c:	4613      	mov	r3, r2
 800081e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8000822:	4602      	mov	r2, r0
 8000824:	189b      	adds	r3, r3, r2
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800082a:	460a      	mov	r2, r1
 800082c:	4153      	adcs	r3, r2
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000830:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8000834:	460b      	mov	r3, r1
 8000836:	18db      	adds	r3, r3, r3
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4613      	mov	r3, r2
 800083c:	eb42 0303 	adc.w	r3, r2, r3
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000846:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800084a:	f022 41f7 	bic.w	r1, r2, #2071986176	@ 0x7b800000
 800084e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8000852:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000856:	f421 1177 	bic.w	r1, r1, #4046848	@ 0x3dc000
 800085a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800085e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000862:	f421 51ff 	bic.w	r1, r1, #8160	@ 0x1fe0
 8000866:	e003      	b.n	8000870 <main+0x3c8>
 8000868:	2000018c 	.word	0x2000018c
 800086c:	2000019f 	.word	0x2000019f
 8000870:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8000874:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000878:	f021 010f 	bic.w	r1, r1, #15
 800087c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8000880:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 8000884:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000888:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8000894:	f7ff fc5a 	bl	800014c <__aeabi_uldivmod>
 8000898:	b2d3      	uxtb	r3, r2
 800089a:	4a41      	ldr	r2, [pc, #260]	@ (80009a0 <main+0x4f8>)
 800089c:	7013      	strb	r3, [r2, #0]
		  TxData[1] = REVERSE_BITS(uartRxData[indexedArrayIndex + 4]);
 800089e:	4b41      	ldr	r3, [pc, #260]	@ (80009a4 <main+0x4fc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	1d1a      	adds	r2, r3, #4
 80008a4:	4b40      	ldr	r3, [pc, #256]	@ (80009a8 <main+0x500>)
 80008a6:	5c9b      	ldrb	r3, [r3, r2]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2200      	movs	r2, #0
 80008ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80008ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80008b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	f04f 0100 	mov.w	r1, #0
 80008bc:	0219      	lsls	r1, r3, #8
 80008be:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80008c2:	0210      	lsls	r0, r2, #8
 80008c4:	4602      	mov	r2, r0
 80008c6:	460b      	mov	r3, r1
 80008c8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80008ca:	1851      	adds	r1, r2, r1
 80008cc:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80008d0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80008d2:	414b      	adcs	r3, r1
 80008d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80008d8:	f04f 0200 	mov.w	r2, #0
 80008dc:	f04f 0300 	mov.w	r3, #0
 80008e0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80008e4:	040b      	lsls	r3, r1, #16
 80008e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80008ea:	4606      	mov	r6, r0
 80008ec:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80008f0:	e9c7 0120 	strd	r0, r1, [r7, #128]	@ 0x80
 80008f4:	4601      	mov	r1, r0
 80008f6:	040a      	lsls	r2, r1, #16
 80008f8:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80008fc:	1889      	adds	r1, r1, r2
 80008fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8000900:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000904:	eb41 0303 	adc.w	r3, r1, r3
 8000908:	647b      	str	r3, [r7, #68]	@ 0x44
 800090a:	f04f 0200 	mov.w	r2, #0
 800090e:	f04f 0300 	mov.w	r3, #0
 8000912:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000914:	020b      	lsls	r3, r1, #8
 8000916:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800091a:	4606      	mov	r6, r0
 800091c:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8000920:	4601      	mov	r1, r0
 8000922:	020a      	lsls	r2, r1, #8
 8000924:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8000928:	4613      	mov	r3, r2
 800092a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800092e:	4602      	mov	r2, r0
 8000930:	189b      	adds	r3, r3, r2
 8000932:	623b      	str	r3, [r7, #32]
 8000934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000936:	460a      	mov	r2, r1
 8000938:	4153      	adcs	r3, r2
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
 800093c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000940:	460b      	mov	r3, r1
 8000942:	18db      	adds	r3, r3, r3
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4613      	mov	r3, r2
 8000948:	eb42 0303 	adc.w	r3, r2, r3
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000952:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000956:	f022 44f7 	bic.w	r4, r2, #2071986176	@ 0x7b800000
 800095a:	f424 1477 	bic.w	r4, r4, #4046848	@ 0x3dc000
 800095e:	f424 54ff 	bic.w	r4, r4, #8160	@ 0x1fe0
 8000962:	f024 040f 	bic.w	r4, r4, #15
 8000966:	f403 7584 	and.w	r5, r3, #264	@ 0x108
 800096a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800096e:	f04f 0300 	mov.w	r3, #0
 8000972:	4620      	mov	r0, r4
 8000974:	4629      	mov	r1, r5
 8000976:	f7ff fbe9 	bl	800014c <__aeabi_uldivmod>
 800097a:	b2d3      	uxtb	r3, r2
 800097c:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <main+0x4f8>)
 800097e:	7053      	strb	r3, [r2, #1]
		  // Send that message to the first CAN mailbox
		  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData, &TxMailbox[0]) != HAL_OK)
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <main+0x504>)
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <main+0x4f8>)
 8000984:	490a      	ldr	r1, [pc, #40]	@ (80009b0 <main+0x508>)
 8000986:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <main+0x50c>)
 8000988:	f000 fe8c 	bl	80016a4 <HAL_CAN_AddTxMessage>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <main+0x4ee>
		  {
			  Error_Handler();
 8000992:	f000 f9cb 	bl	8000d2c <Error_Handler>
		  }
		  //printf("Mailbox after send = %X\n", HAL_CAN_GetTxMailboxesFreeLevel(&hcan));


		}
		HAL_Delay(100);
 8000996:	2064      	movs	r0, #100	@ 0x64
 8000998:	f000 fc58 	bl	800124c <HAL_Delay>
	  if(HAL_UART_Receive(&huart1, uartRxData, 19, 1000) == HAL_OK)
 800099c:	e5c2      	b.n	8000524 <main+0x7c>
 800099e:	bf00      	nop
 80009a0:	2000017c 	.word	0x2000017c
 80009a4:	2000019f 	.word	0x2000019f
 80009a8:	2000018c 	.word	0x2000018c
 80009ac:	20000170 	.word	0x20000170
 80009b0:	2000013c 	.word	0x2000013c
 80009b4:	20000084 	.word	0x20000084

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b090      	sub	sp, #64	@ 0x40
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	2228      	movs	r2, #40	@ 0x28
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fa35 	bl	8003e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fd3d 	bl	8002480 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f98e 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2302      	movs	r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 ffaa 	bl	8002984 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a36:	f000 f979 	bl	8000d2c <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3740      	adds	r7, #64	@ 0x40
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a4c:	4a26      	ldr	r2, [pc, #152]	@ (8000ae8 <MX_CAN_Init+0xa4>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a52:	2212      	movs	r2, #18
 8000a54:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000a56:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a5c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a6a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a96:	4813      	ldr	r0, [pc, #76]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000a98:	f000 fbfc 	bl	8001294 <HAL_CAN_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000aa2:	f000 f943 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8000aaa:	230a      	movs	r3, #10
 8000aac:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 8000ab2:	f242 0360 	movw	r3, #8288	@ 0x2060
 8000ab6:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x1<<13;
 8000abc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac0:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000ace:	230d      	movs	r3, #13
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <MX_CAN_Init+0xa0>)
 8000ad8:	f000 fcd7 	bl	800148a <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	@ 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000084 	.word	0x20000084
 8000ae8:	40006400 	.word	0x40006400

08000aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1c:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 250;
 8000b24:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b26:	22fa      	movs	r2, #250	@ 0xfa
 8000b28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b32:	22ff      	movs	r2, #255	@ 0xff
 8000b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b42:	4829      	ldr	r0, [pc, #164]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b44:	f002 f8ac 	bl	8002ca0 <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b4e:	f000 f8ed 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4822      	ldr	r0, [pc, #136]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b60:	f002 faaa 	bl	80030b8 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b6a:	f000 f8df 	bl	8000d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b6e:	481e      	ldr	r0, [pc, #120]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b70:	f002 f8e5 	bl	8002d3e <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b7a:	f000 f8d7 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4816      	ldr	r0, [pc, #88]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b8e:	f002 fdff 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b98:	f000 f8c8 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	@ 0x60
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 127;
 8000ba0:	237f      	movs	r3, #127	@ 0x7f
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2208      	movs	r2, #8
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000bb4:	f002 f9be 	bl	8002f34 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000bbe:	f000 f8b5 	bl	8000d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	220c      	movs	r2, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000bca:	f002 f9b3 	bl	8002f34 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000bd4:	f000 f8aa 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bd8:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000bda:	f000 f969 	bl	8000eb0 <HAL_TIM_MspPostInit>

}
 8000bde:	bf00      	nop
 8000be0:	3738      	adds	r7, #56	@ 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000ac 	.word	0x200000ac

08000bec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <MX_USART1_UART_Init+0x50>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c24:	f002 fe12 	bl	800384c <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c2e:	f000 f87d 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000f4 	.word	0x200000f4
 8000c3c:	40013800 	.word	0x40013800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c5a:	f043 0320 	orr.w	r3, r3, #32
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0320 	and.w	r3, r3, #32
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a16      	ldr	r2, [pc, #88]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_GPIO_Init+0xa4>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PS0_WAKE_Pin|PS1_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2106      	movs	r1, #6
 8000ca0:	4811      	ldr	r0, [pc, #68]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000ca2:	f001 fbd5 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PS0_WAKE_Pin PS1_Pin */
  GPIO_InitStruct.Pin = PS0_WAKE_Pin|PS1_Pin;
 8000ca6:	2306      	movs	r3, #6
 8000ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000cbe:	f001 fa43 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INTR_Pin */
  GPIO_InitStruct.Pin = IMU_INTR_Pin;
 8000cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_GPIO_Init+0xac>)
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IMU_INTR_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	@ (8000cf0 <MX_GPIO_Init+0xb0>)
 8000cd8:	f001 fa36 	bl	8002148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	10210000 	.word	0x10210000
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e009      	b.n	8000d1a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	60ba      	str	r2, [r7, #8]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fb92 	bl	8000438 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	dbf1      	blt.n	8000d06 <_write+0x12>
  }
  return len;
 8000d22:	687b      	ldr	r3, [r7, #4]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //RED LED or D4
 8000d34:	210c      	movs	r1, #12
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <Error_Handler+0x24>)
 8000d38:	f002 f85a 	bl	8002df0 <HAL_TIM_PWM_Start>
  while (1)
  {

	  printf("Errored out: %x \n", HAL_CAN_GetError(&hcan));
 8000d3c:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <Error_Handler+0x28>)
 8000d3e:	f001 f8e9 	bl	8001f14 <HAL_CAN_GetError>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <Error_Handler+0x2c>)
 8000d48:	f003 f820 	bl	8003d8c <iprintf>
 8000d4c:	e7f6      	b.n	8000d3c <Error_Handler+0x10>
 8000d4e:	bf00      	nop
 8000d50:	200000ac 	.word	0x200000ac
 8000d54:	20000084 	.word	0x20000084
 8000d58:	08004a94 	.word	0x08004a94

08000d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_MspInit+0x5c>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <HAL_MspInit+0x5c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_MspInit+0x5c>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_MspInit+0x5c>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_MspInit+0x5c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <HAL_MspInit+0x5c>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_MspInit+0x60>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <HAL_MspInit+0x60>)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a24      	ldr	r2, [pc, #144]	@ (8000e6c <HAL_CAN_MspInit+0xac>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d141      	bne.n	8000e64 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <HAL_CAN_MspInit+0xb0>)
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <HAL_CAN_MspInit+0xb0>)
 8000de6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dea:	61d3      	str	r3, [r2, #28]
 8000dec:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <HAL_CAN_MspInit+0xb0>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <HAL_CAN_MspInit+0xb0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e70 <HAL_CAN_MspInit+0xb0>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <HAL_CAN_MspInit+0xb0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	4813      	ldr	r0, [pc, #76]	@ (8000e74 <HAL_CAN_MspInit+0xb4>)
 8000e26:	f001 f98f 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <HAL_CAN_MspInit+0xb4>)
 8000e40:	f001 f982 	bl	8002148 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2014      	movs	r0, #20
 8000e4a:	f001 f946 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e4e:	2014      	movs	r0, #20
 8000e50:	f001 f95f 	bl	8002112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2015      	movs	r0, #21
 8000e5a:	f001 f93e 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e5e:	2015      	movs	r0, #21
 8000e60:	f001 f957 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40006400 	.word	0x40006400
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010800 	.word	0x40010800

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e88:	d10b      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_TIM_Base_MspInit+0x34>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_TIM_Base_MspInit+0x34>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	61d3      	str	r3, [r2, #28]
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_TIM_Base_MspInit+0x34>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ece:	d117      	bne.n	8000f00 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <HAL_TIM_MspPostInit+0x58>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f08 <HAL_TIM_MspPostInit+0x58>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_TIM_MspPostInit+0x58>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|RED_LED_Pin;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <HAL_TIM_MspPostInit+0x5c>)
 8000efc:	f001 f924 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010800 	.word	0x40010800

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d131      	bne.n	8000f94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a14      	ldr	r2, [pc, #80]	@ (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	4619      	mov	r1, r3
 8000f74:	480b      	ldr	r0, [pc, #44]	@ (8000fa4 <HAL_UART_MspInit+0x94>)
 8000f76:	f001 f8e7 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <HAL_UART_MspInit+0x94>)
 8000f90:	f001 f8da 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f90c 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001006:	f000 fd62 	bl	8001ace <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000084 	.word	0x20000084

08001014 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <CAN1_RX1_IRQHandler+0x10>)
 800101a:	f000 fd58 	bl	8001ace <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000084 	.word	0x20000084

08001028 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e00a      	b.n	8001050 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103a:	f3af 8000 	nop.w
 800103e:	4601      	mov	r1, r0
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	b2ca      	uxtb	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf0      	blt.n	800103a <_read+0x12>
  }

  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001088:	605a      	str	r2, [r3, #4]
  return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <_isatty>:

int _isatty(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b085      	sub	sp, #20
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
	...

080010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010cc:	4a14      	ldr	r2, [pc, #80]	@ (8001120 <_sbrk+0x5c>)
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <_sbrk+0x60>)
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <_sbrk+0x64>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	@ (800112c <_sbrk+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d207      	bcs.n	8001104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f4:	f002 feee 	bl	8003ed4 <__errno>
 80010f8:	4603      	mov	r3, r0
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e009      	b.n	8001118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <_sbrk+0x64>)
 8001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20005000 	.word	0x20005000
 8001124:	00000400 	.word	0x00000400
 8001128:	200001a0 	.word	0x200001a0
 800112c:	200002f8 	.word	0x200002f8

08001130 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800113c:	f7ff fff8 	bl	8001130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480b      	ldr	r0, [pc, #44]	@ (8001170 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001142:	490c      	ldr	r1, [pc, #48]	@ (8001174 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001144:	4a0c      	ldr	r2, [pc, #48]	@ (8001178 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a09      	ldr	r2, [pc, #36]	@ (800117c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001158:	4c09      	ldr	r4, [pc, #36]	@ (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001166:	f002 febb 	bl	8003ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116a:	f7ff f99d 	bl	80004a8 <main>
  bx lr
 800116e:	4770      	bx	lr
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001178:	08004b18 	.word	0x08004b18
  ldr r2, =_sbss
 800117c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001180:	200002f4 	.word	0x200002f4

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <HAL_Init+0x28>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	@ (80011b0 <HAL_Init+0x28>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 ff93 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	200f      	movs	r0, #15
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f7ff fdda 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 ffab 	bl	800212e <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 ff73 	bl	80020da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	@ (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	20000008 	.word	0x20000008
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_IncTick+0x1c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <HAL_IncTick+0x20>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a03      	ldr	r2, [pc, #12]	@ (8001234 <HAL_IncTick+0x20>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	20000008 	.word	0x20000008
 8001234:	200001a4 	.word	0x200001a4

08001238 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b02      	ldr	r3, [pc, #8]	@ (8001248 <HAL_GetTick+0x10>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	200001a4 	.word	0x200001a4

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff fff0 	bl	8001238 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffe0 	bl	8001238 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e0ed      	b.n	8001482 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fd84 	bl	8000dc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff ffb6 	bl	8001238 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ce:	e012      	b.n	80012f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d0:	f7ff ffb2 	bl	8001238 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b0a      	cmp	r3, #10
 80012dc:	d90b      	bls.n	80012f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2205      	movs	r2, #5
 80012ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0c5      	b.n	8001482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0e5      	beq.n	80012d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0202 	bic.w	r2, r2, #2
 8001312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001314:	f7ff ff90 	bl	8001238 <HAL_GetTick>
 8001318:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800131a:	e012      	b.n	8001342 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800131c:	f7ff ff8c 	bl	8001238 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b0a      	cmp	r3, #10
 8001328:	d90b      	bls.n	8001342 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2205      	movs	r2, #5
 800133a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e09f      	b.n	8001482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e5      	bne.n	800131c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7e1b      	ldrb	r3, [r3, #24]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d108      	bne.n	800136a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e007      	b.n	800137a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7e5b      	ldrb	r3, [r3, #25]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e007      	b.n	80013a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e9b      	ldrb	r3, [r3, #26]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d108      	bne.n	80013be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0220 	orr.w	r2, r2, #32
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e007      	b.n	80013ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0220 	bic.w	r2, r2, #32
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7edb      	ldrb	r3, [r3, #27]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d108      	bne.n	80013e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0210 	bic.w	r2, r2, #16
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e007      	b.n	80013f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0210 	orr.w	r2, r2, #16
 80013f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7f1b      	ldrb	r3, [r3, #28]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d108      	bne.n	8001412 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0208 	orr.w	r2, r2, #8
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e007      	b.n	8001422 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0208 	bic.w	r2, r2, #8
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7f5b      	ldrb	r3, [r3, #29]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d108      	bne.n	800143c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0204 	orr.w	r2, r2, #4
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e007      	b.n	800144c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0204 	bic.w	r2, r2, #4
 800144a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	ea42 0103 	orr.w	r1, r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800148a:	b480      	push	{r7}
 800148c:	b087      	sub	sp, #28
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d003      	beq.n	80014b0 <HAL_CAN_ConfigFilter+0x26>
 80014a8:	7cfb      	ldrb	r3, [r7, #19]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	f040 80aa 	bne.w	8001604 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	2201      	movs	r2, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d123      	bne.n	8001532 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	401a      	ands	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800150c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3248      	adds	r2, #72	@ 0x48
 8001512:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001526:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001528:	6979      	ldr	r1, [r7, #20]
 800152a:	3348      	adds	r3, #72	@ 0x48
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d122      	bne.n	8001580 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	431a      	orrs	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800155a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3248      	adds	r2, #72	@ 0x48
 8001560:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001574:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001576:	6979      	ldr	r1, [r7, #20]
 8001578:	3348      	adds	r3, #72	@ 0x48
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800159a:	e007      	b.n	80015ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015c6:	e007      	b.n	80015d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015f6:	f023 0201 	bic.w	r2, r3, #1
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	e006      	b.n	8001612 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
  }
}
 8001612:	4618      	mov	r0, r3
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d12e      	bne.n	800168e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff fdf6 	bl	8001238 <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800164e:	e012      	b.n	8001676 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001650:	f7ff fdf2 	bl	8001238 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b0a      	cmp	r3, #10
 800165c:	d90b      	bls.n	8001676 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001662:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2205      	movs	r2, #5
 800166e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e012      	b.n	800169c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1e5      	bne.n	8001650 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e006      	b.n	800169c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
  }
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d003      	beq.n	80016d0 <HAL_CAN_AddTxMessage+0x2c>
 80016c8:	7ffb      	ldrb	r3, [r7, #31]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	f040 80ad 	bne.w	800182a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10a      	bne.n	80016f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8095 	beq.w	800181a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	0e1b      	lsrs	r3, r3, #24
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016fa:	2201      	movs	r2, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001716:	68f9      	ldr	r1, [r7, #12]
 8001718:	6809      	ldr	r1, [r1, #0]
 800171a:	431a      	orrs	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3318      	adds	r3, #24
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	440b      	add	r3, r1
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e00f      	b.n	8001748 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001732:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800173c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3318      	adds	r3, #24
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	440b      	add	r3, r1
 8001746:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6819      	ldr	r1, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3318      	adds	r3, #24
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	440b      	add	r3, r1
 8001758:	3304      	adds	r3, #4
 800175a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	7d1b      	ldrb	r3, [r3, #20]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d111      	bne.n	8001788 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3318      	adds	r3, #24
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	6811      	ldr	r1, [r2, #0]
 8001778:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3318      	adds	r3, #24
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	440b      	add	r3, r1
 8001784:	3304      	adds	r3, #4
 8001786:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3307      	adds	r3, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	061a      	lsls	r2, r3, #24
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3306      	adds	r3, #6
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3305      	adds	r3, #5
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4313      	orrs	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	3204      	adds	r2, #4
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	4610      	mov	r0, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6811      	ldr	r1, [r2, #0]
 80017b0:	ea43 0200 	orr.w	r2, r3, r0
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	440b      	add	r3, r1
 80017ba:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80017be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3303      	adds	r3, #3
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	061a      	lsls	r2, r3, #24
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3302      	adds	r3, #2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	041b      	lsls	r3, r3, #16
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3301      	adds	r3, #1
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	4313      	orrs	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	7812      	ldrb	r2, [r2, #0]
 80017e0:	4610      	mov	r0, r2
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	6811      	ldr	r1, [r2, #0]
 80017e6:	ea43 0200 	orr.w	r2, r3, r0
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	440b      	add	r3, r1
 80017f0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80017f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3318      	adds	r3, #24
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	6811      	ldr	r1, [r2, #0]
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3318      	adds	r3, #24
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	440b      	add	r3, r1
 8001814:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e00e      	b.n	8001838 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e006      	b.n	8001838 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
  }
}
 8001838:	4618      	mov	r0, r3
 800183a:	3724      	adds	r7, #36	@ 0x24
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001842:	b480      	push	{r7}
 8001844:	b087      	sub	sp, #28
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001856:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d003      	beq.n	8001866 <HAL_CAN_GetRxMessage+0x24>
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b02      	cmp	r3, #2
 8001862:	f040 8103 	bne.w	8001a6c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10e      	bne.n	800188a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0f7      	b.n	8001a7a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0e8      	b.n	8001a7a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	331b      	adds	r3, #27
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0204 	and.w	r2, r3, #4
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	331b      	adds	r3, #27
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0d5b      	lsrs	r3, r3, #21
 80018d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	331b      	adds	r3, #27
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	08db      	lsrs	r3, r3, #3
 80018f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	331b      	adds	r3, #27
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0202 	and.w	r2, r3, #2
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	331b      	adds	r3, #27
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	3304      	adds	r3, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2208      	movs	r2, #8
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	e00b      	b.n	8001946 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	331b      	adds	r3, #27
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4413      	add	r3, r2
 800193a:	3304      	adds	r3, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 020f 	and.w	r2, r3, #15
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	331b      	adds	r3, #27
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	3304      	adds	r3, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	b2da      	uxtb	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	331b      	adds	r3, #27
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	b29a      	uxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	4413      	add	r3, r2
 8001980:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0a1a      	lsrs	r2, r3, #8
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0c1a      	lsrs	r2, r3, #16
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3302      	adds	r3, #2
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0e1a      	lsrs	r2, r3, #24
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3303      	adds	r3, #3
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3304      	adds	r3, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0a1a      	lsrs	r2, r3, #8
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	3305      	adds	r3, #5
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0c1a      	lsrs	r2, r3, #16
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3306      	adds	r3, #6
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0e1a      	lsrs	r2, r3, #24
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	3307      	adds	r3, #7
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0220 	orr.w	r2, r2, #32
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	e007      	b.n	8001a68 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0220 	orr.w	r2, r2, #32
 8001a66:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e006      	b.n	8001a7a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d002      	beq.n	8001aa2 <HAL_CAN_ActivateNotification+0x1e>
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d109      	bne.n	8001ab6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6959      	ldr	r1, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e006      	b.n	8001ac4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b08a      	sub	sp, #40	@ 0x28
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d07c      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d023      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f983 	bl	8001e3c <HAL_CAN_TxMailbox0CompleteCallback>
 8001b36:	e016      	b.n	8001b66 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b4a:	e00c      	b.n	8001b66 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b5e:	e002      	b.n	8001b66 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f986 	bl	8001e72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d024      	beq.n	8001bba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f962 	bl	8001e4e <HAL_CAN_TxMailbox1CompleteCallback>
 8001b8a:	e016      	b.n	8001bba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9e:	e00c      	b.n	8001bba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d004      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb2:	e002      	b.n	8001bba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f965 	bl	8001e84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d024      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f941 	bl	8001e60 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bde:	e016      	b.n	8001c0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf2:	e00c      	b.n	8001c0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c06:	e002      	b.n	8001c0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f944 	bl	8001e96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00c      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00b      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f92a 	bl	8001ea8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7fe fc09 	bl	8000484 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00c      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2210      	movs	r2, #16
 8001c94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2208      	movs	r2, #8
 8001cb0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f90a 	bl	8001ecc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8f2 	bl	8001eba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00b      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2210      	movs	r2, #16
 8001cf0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8f3 	bl	8001ede <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2208      	movs	r2, #8
 8001d12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8eb 	bl	8001ef0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d07b      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d072      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d043      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d03e      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d9c:	2b60      	cmp	r3, #96	@ 0x60
 8001d9e:	d02b      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x32a>
 8001da0:	2b60      	cmp	r3, #96	@ 0x60
 8001da2:	d82e      	bhi.n	8001e02 <HAL_CAN_IRQHandler+0x334>
 8001da4:	2b50      	cmp	r3, #80	@ 0x50
 8001da6:	d022      	beq.n	8001dee <HAL_CAN_IRQHandler+0x320>
 8001da8:	2b50      	cmp	r3, #80	@ 0x50
 8001daa:	d82a      	bhi.n	8001e02 <HAL_CAN_IRQHandler+0x334>
 8001dac:	2b40      	cmp	r3, #64	@ 0x40
 8001dae:	d019      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x316>
 8001db0:	2b40      	cmp	r3, #64	@ 0x40
 8001db2:	d826      	bhi.n	8001e02 <HAL_CAN_IRQHandler+0x334>
 8001db4:	2b30      	cmp	r3, #48	@ 0x30
 8001db6:	d010      	beq.n	8001dda <HAL_CAN_IRQHandler+0x30c>
 8001db8:	2b30      	cmp	r3, #48	@ 0x30
 8001dba:	d822      	bhi.n	8001e02 <HAL_CAN_IRQHandler+0x334>
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d002      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0x2f8>
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d005      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dc4:	e01d      	b.n	8001e02 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dce:	e019      	b.n	8001e04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dd8:	e014      	b.n	8001e04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001de2:	e00f      	b.n	8001e04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dec:	e00a      	b.n	8001e04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001df6:	e005      	b.n	8001e04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e00:	e000      	b.n	8001e04 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e02:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e12:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2204      	movs	r2, #4
 8001e1a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f867 	bl	8001f02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	@ 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
	...

08001f2c <__NVIC_SetPriorityGrouping>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4906      	ldr	r1, [pc, #24]	@ (8001fc4 <__NVIC_EnableIRQ+0x34>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	@ (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	@ (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	@ 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <SysTick_Config>:
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff90 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff2d 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff42 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff90 	bl	800201c <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5f 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff35 	bl	8001f90 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b08b      	sub	sp, #44	@ 0x2c
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	e169      	b.n	8002430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800215c:	2201      	movs	r2, #1
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8158 	bne.w	800242a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a9a      	ldr	r2, [pc, #616]	@ (80023e8 <HAL_GPIO_Init+0x2a0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d05e      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 8002184:	4a98      	ldr	r2, [pc, #608]	@ (80023e8 <HAL_GPIO_Init+0x2a0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d875      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 800218a:	4a98      	ldr	r2, [pc, #608]	@ (80023ec <HAL_GPIO_Init+0x2a4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d058      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 8002190:	4a96      	ldr	r2, [pc, #600]	@ (80023ec <HAL_GPIO_Init+0x2a4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d86f      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 8002196:	4a96      	ldr	r2, [pc, #600]	@ (80023f0 <HAL_GPIO_Init+0x2a8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d052      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 800219c:	4a94      	ldr	r2, [pc, #592]	@ (80023f0 <HAL_GPIO_Init+0x2a8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d869      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021a2:	4a94      	ldr	r2, [pc, #592]	@ (80023f4 <HAL_GPIO_Init+0x2ac>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04c      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 80021a8:	4a92      	ldr	r2, [pc, #584]	@ (80023f4 <HAL_GPIO_Init+0x2ac>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d863      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021ae:	4a92      	ldr	r2, [pc, #584]	@ (80023f8 <HAL_GPIO_Init+0x2b0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d046      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 80021b4:	4a90      	ldr	r2, [pc, #576]	@ (80023f8 <HAL_GPIO_Init+0x2b0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d85d      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021ba:	2b12      	cmp	r3, #18
 80021bc:	d82a      	bhi.n	8002214 <HAL_GPIO_Init+0xcc>
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d859      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021c2:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <HAL_GPIO_Init+0x80>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	08002243 	.word	0x08002243
 80021cc:	0800221d 	.word	0x0800221d
 80021d0:	0800222f 	.word	0x0800222f
 80021d4:	08002271 	.word	0x08002271
 80021d8:	08002277 	.word	0x08002277
 80021dc:	08002277 	.word	0x08002277
 80021e0:	08002277 	.word	0x08002277
 80021e4:	08002277 	.word	0x08002277
 80021e8:	08002277 	.word	0x08002277
 80021ec:	08002277 	.word	0x08002277
 80021f0:	08002277 	.word	0x08002277
 80021f4:	08002277 	.word	0x08002277
 80021f8:	08002277 	.word	0x08002277
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002277 	.word	0x08002277
 8002204:	08002277 	.word	0x08002277
 8002208:	08002277 	.word	0x08002277
 800220c:	08002225 	.word	0x08002225
 8002210:	08002239 	.word	0x08002239
 8002214:	4a79      	ldr	r2, [pc, #484]	@ (80023fc <HAL_GPIO_Init+0x2b4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800221a:	e02c      	b.n	8002276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e029      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	3304      	adds	r3, #4
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e024      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	3308      	adds	r3, #8
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e01f      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	330c      	adds	r3, #12
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e01a      	b.n	8002278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224a:	2304      	movs	r3, #4
 800224c:	623b      	str	r3, [r7, #32]
          break;
 800224e:	e013      	b.n	8002278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	611a      	str	r2, [r3, #16]
          break;
 8002262:	e009      	b.n	8002278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002264:	2308      	movs	r3, #8
 8002266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	615a      	str	r2, [r3, #20]
          break;
 800226e:	e003      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x130>
          break;
 8002276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	@ 0xff
 800227c:	d801      	bhi.n	8002282 <HAL_GPIO_Init+0x13a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_Init+0x13e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2bff      	cmp	r3, #255	@ 0xff
 800228c:	d802      	bhi.n	8002294 <HAL_GPIO_Init+0x14c>
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	e002      	b.n	800229a <HAL_GPIO_Init+0x152>
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	3b08      	subs	r3, #8
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	210f      	movs	r1, #15
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	401a      	ands	r2, r3
 80022ac:	6a39      	ldr	r1, [r7, #32]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80b1 	beq.w	800242a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002400 <HAL_GPIO_Init+0x2b8>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002400 <HAL_GPIO_Init+0x2b8>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <HAL_GPIO_Init+0x2b8>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022e0:	4a48      	ldr	r2, [pc, #288]	@ (8002404 <HAL_GPIO_Init+0x2bc>)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a40      	ldr	r2, [pc, #256]	@ (8002408 <HAL_GPIO_Init+0x2c0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_GPIO_Init+0x1ec>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3f      	ldr	r2, [pc, #252]	@ (800240c <HAL_GPIO_Init+0x2c4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_Init+0x1e8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3e      	ldr	r2, [pc, #248]	@ (8002410 <HAL_GPIO_Init+0x2c8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x1e4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3d      	ldr	r2, [pc, #244]	@ (8002414 <HAL_GPIO_Init+0x2cc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_Init+0x1e0>
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002328:	2304      	movs	r3, #4
 800232a:	e004      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 800232c:	2302      	movs	r3, #2
 800232e:	e002      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002334:	2300      	movs	r3, #0
 8002336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002346:	492f      	ldr	r1, [pc, #188]	@ (8002404 <HAL_GPIO_Init+0x2bc>)
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	492c      	ldr	r1, [pc, #176]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800236e:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4928      	ldr	r1, [pc, #160]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002378:	4013      	ands	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002388:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	4922      	ldr	r1, [pc, #136]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002396:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	43db      	mvns	r3, r3
 800239e:	491e      	ldr	r1, [pc, #120]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4918      	ldr	r1, [pc, #96]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4914      	ldr	r1, [pc, #80]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d021      	beq.n	800241c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	490e      	ldr	r1, [pc, #56]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e021      	b.n	800242a <HAL_GPIO_Init+0x2e2>
 80023e6:	bf00      	nop
 80023e8:	10320000 	.word	0x10320000
 80023ec:	10310000 	.word	0x10310000
 80023f0:	10220000 	.word	0x10220000
 80023f4:	10210000 	.word	0x10210000
 80023f8:	10120000 	.word	0x10120000
 80023fc:	10110000 	.word	0x10110000
 8002400:	40021000 	.word	0x40021000
 8002404:	40010000 	.word	0x40010000
 8002408:	40010800 	.word	0x40010800
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_GPIO_Init+0x304>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	43db      	mvns	r3, r3
 8002424:	4909      	ldr	r1, [pc, #36]	@ (800244c <HAL_GPIO_Init+0x304>)
 8002426:	4013      	ands	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	3301      	adds	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	f47f ae8e 	bne.w	800215c <HAL_GPIO_Init+0x14>
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	372c      	adds	r7, #44	@ 0x2c
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e272      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8087 	beq.w	80025ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	4b92      	ldr	r3, [pc, #584]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d00c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024ac:	4b8f      	ldr	r3, [pc, #572]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d112      	bne.n	80024de <HAL_RCC_OscConfig+0x5e>
 80024b8:	4b8c      	ldr	r3, [pc, #560]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c4:	d10b      	bne.n	80024de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c6:	4b89      	ldr	r3, [pc, #548]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06c      	beq.n	80025ac <HAL_RCC_OscConfig+0x12c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d168      	bne.n	80025ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e24c      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x76>
 80024e8:	4b80      	ldr	r3, [pc, #512]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a7f      	ldr	r2, [pc, #508]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e02e      	b.n	8002554 <HAL_RCC_OscConfig+0xd4>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x98>
 80024fe:	4b7b      	ldr	r3, [pc, #492]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7a      	ldr	r2, [pc, #488]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b78      	ldr	r3, [pc, #480]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a77      	ldr	r2, [pc, #476]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xd4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0xbc>
 8002522:	4b72      	ldr	r3, [pc, #456]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a71      	ldr	r2, [pc, #452]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b6f      	ldr	r3, [pc, #444]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6e      	ldr	r2, [pc, #440]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xd4>
 800253c:	4b6b      	ldr	r3, [pc, #428]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6a      	ldr	r2, [pc, #424]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b68      	ldr	r3, [pc, #416]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a67      	ldr	r2, [pc, #412]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002552:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fe6c 	bl	8001238 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fe68 	bl	8001238 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	@ 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e200      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b5d      	ldr	r3, [pc, #372]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xe4>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fe58 	bl	8001238 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fe54 	bl	8001238 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	@ 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1ec      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b53      	ldr	r3, [pc, #332]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x10c>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	4b4c      	ldr	r3, [pc, #304]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025c6:	4b49      	ldr	r3, [pc, #292]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x18c>
 80025d2:	4b46      	ldr	r3, [pc, #280]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b43      	ldr	r3, [pc, #268]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x176>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1c0      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4939      	ldr	r1, [pc, #228]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e03a      	b.n	8002682 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe fe0d 	bl	8001238 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002622:	f7fe fe09 	bl	8001238 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1a1      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b2a      	ldr	r3, [pc, #168]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4927      	ldr	r1, [pc, #156]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b26      	ldr	r3, [pc, #152]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fdec 	bl	8001238 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002664:	f7fe fde8 	bl	8001238 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e180      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	4b1d      	ldr	r3, [pc, #116]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d03a      	beq.n	8002704 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d019      	beq.n	80026ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002696:	4b17      	ldr	r3, [pc, #92]	@ (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7fe fdcc 	bl	8001238 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe fdc8 	bl	8001238 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e160      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <HAL_RCC_OscConfig+0x26c>)
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f000 face 	bl	8002c64 <RCC_Delay>
 80026c8:	e01c      	b.n	8002704 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_RCC_OscConfig+0x274>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe fdb2 	bl	8001238 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d6:	e00f      	b.n	80026f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7fe fdae 	bl	8001238 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d908      	bls.n	80026f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e146      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	42420000 	.word	0x42420000
 80026f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	4b92      	ldr	r3, [pc, #584]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e9      	bne.n	80026d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a6 	beq.w	800285e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b8b      	ldr	r3, [pc, #556]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4a87      	ldr	r2, [pc, #540]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272c:	61d3      	str	r3, [r2, #28]
 800272e:	4b85      	ldr	r3, [pc, #532]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b82      	ldr	r3, [pc, #520]	@ (8002948 <HAL_RCC_OscConfig+0x4c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b7f      	ldr	r3, [pc, #508]	@ (8002948 <HAL_RCC_OscConfig+0x4c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7e      	ldr	r2, [pc, #504]	@ (8002948 <HAL_RCC_OscConfig+0x4c8>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7fe fd6f 	bl	8001238 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7fe fd6b 	bl	8001238 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b64      	cmp	r3, #100	@ 0x64
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e103      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	4b75      	ldr	r3, [pc, #468]	@ (8002948 <HAL_RCC_OscConfig+0x4c8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x312>
 8002784:	4b6f      	ldr	r3, [pc, #444]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4a6e      	ldr	r2, [pc, #440]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6213      	str	r3, [r2, #32]
 8002790:	e02d      	b.n	80027ee <HAL_RCC_OscConfig+0x36e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x334>
 800279a:	4b6a      	ldr	r3, [pc, #424]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a69      	ldr	r2, [pc, #420]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	4b67      	ldr	r3, [pc, #412]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a66      	ldr	r2, [pc, #408]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	e01c      	b.n	80027ee <HAL_RCC_OscConfig+0x36e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCC_OscConfig+0x356>
 80027bc:	4b61      	ldr	r3, [pc, #388]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4a60      	ldr	r2, [pc, #384]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	6213      	str	r3, [r2, #32]
 80027c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	e00b      	b.n	80027ee <HAL_RCC_OscConfig+0x36e>
 80027d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a5a      	ldr	r2, [pc, #360]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6213      	str	r3, [r2, #32]
 80027e2:	4b58      	ldr	r3, [pc, #352]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe fd1f 	bl	8001238 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fd1b 	bl	8001238 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0b1      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	4b4b      	ldr	r3, [pc, #300]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ee      	beq.n	80027fe <HAL_RCC_OscConfig+0x37e>
 8002820:	e014      	b.n	800284c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe fd09 	bl	8001238 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe fd05 	bl	8001238 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e09b      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	4b40      	ldr	r3, [pc, #256]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ee      	bne.n	800282a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d105      	bne.n	800285e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002852:	4b3c      	ldr	r3, [pc, #240]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4a3b      	ldr	r2, [pc, #236]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800285c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8087 	beq.w	8002976 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002868:	4b36      	ldr	r3, [pc, #216]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d061      	beq.n	8002938 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d146      	bne.n	800290a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	4b33      	ldr	r3, [pc, #204]	@ (800294c <HAL_RCC_OscConfig+0x4cc>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fcd9 	bl	8001238 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fcd5 	bl	8001238 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e06d      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289c:	4b29      	ldr	r3, [pc, #164]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b2:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4921      	ldr	r1, [pc, #132]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a19      	ldr	r1, [r3, #32]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	430b      	orrs	r3, r1
 80028d6:	491b      	ldr	r1, [pc, #108]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fca9 	bl	8001238 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fca5 	bl	8001238 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e03d      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x46a>
 8002908:	e035      	b.n	8002976 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x4cc>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fc92 	bl	8001238 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fc8e 	bl	8001238 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e026      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x498>
 8002936:	e01e      	b.n	8002976 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e019      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
 8002944:	40021000 	.word	0x40021000
 8002948:	40007000 	.word	0x40007000
 800294c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_RCC_OscConfig+0x500>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	429a      	cmp	r2, r3
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000

08002984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0d0      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b6a      	ldr	r3, [pc, #424]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b67      	ldr	r3, [pc, #412]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	4965      	ldr	r1, [pc, #404]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b63      	ldr	r3, [pc, #396]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b59      	ldr	r3, [pc, #356]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a58      	ldr	r2, [pc, #352]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	4b53      	ldr	r3, [pc, #332]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a52      	ldr	r2, [pc, #328]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b50      	ldr	r3, [pc, #320]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	494d      	ldr	r1, [pc, #308]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d040      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d115      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e073      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3d      	ldr	r3, [pc, #244]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06b      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b39      	ldr	r3, [pc, #228]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4936      	ldr	r1, [pc, #216]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fbe0 	bl	8001238 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fbdc 	bl	8001238 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e053      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2d      	ldr	r3, [pc, #180]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d210      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	4922      	ldr	r1, [pc, #136]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e032      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4916      	ldr	r1, [pc, #88]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afe:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	490e      	ldr	r1, [pc, #56]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b12:	f000 f821 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	490a      	ldr	r1, [pc, #40]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	4a09      	ldr	r2, [pc, #36]	@ (8002b50 <HAL_RCC_ClockConfig+0x1cc>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <HAL_RCC_ClockConfig+0x1d0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fb3e 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08004aa8 	.word	0x08004aa8
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b72:	4b1e      	ldr	r3, [pc, #120]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x94>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x30>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x36>
 8002b86:	e027      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b88:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b8a:	613b      	str	r3, [r7, #16]
      break;
 8002b8c:	e027      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0c9b      	lsrs	r3, r3, #18
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ba6:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	0c5b      	lsrs	r3, r3, #17
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	4a11      	ldr	r2, [pc, #68]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bba:	fb03 f202 	mul.w	r2, r3, r2
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e004      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	613b      	str	r3, [r7, #16]
      break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bda:	613b      	str	r3, [r7, #16]
      break;
 8002bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bde:	693b      	ldr	r3, [r7, #16]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	007a1200 	.word	0x007a1200
 8002bf4:	08004ac0 	.word	0x08004ac0
 8002bf8:	08004ad0 	.word	0x08004ad0
 8002bfc:	003d0900 	.word	0x003d0900

08002c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b02      	ldr	r3, [pc, #8]	@ (8002c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000000 	.word	0x20000000

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff2 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	@ (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08004ab8 	.word	0x08004ab8

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	0adb      	lsrs	r3, r3, #11
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	@ (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08004ab8 	.word	0x08004ab8

08002c64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <RCC_Delay+0x34>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <RCC_Delay+0x38>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0a5b      	lsrs	r3, r3, #9
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c80:	bf00      	nop
  }
  while (Delay --);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	60fa      	str	r2, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f9      	bne.n	8002c80 <RCC_Delay+0x1c>
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e041      	b.n	8002d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe f8d6 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f000 fab2 	bl	8003248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e041      	b.n	8002dd4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f839 	bl	8002ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	f000 fa63 	bl	8003248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_TIM_PWM_Start+0x24>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e022      	b.n	8002e5a <HAL_TIM_PWM_Start+0x6a>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d109      	bne.n	8002e2e <HAL_TIM_PWM_Start+0x3e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e015      	b.n	8002e5a <HAL_TIM_PWM_Start+0x6a>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d109      	bne.n	8002e48 <HAL_TIM_PWM_Start+0x58>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e008      	b.n	8002e5a <HAL_TIM_PWM_Start+0x6a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e05e      	b.n	8002f20 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x82>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e70:	e013      	b.n	8002e9a <HAL_TIM_PWM_Start+0xaa>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d104      	bne.n	8002e82 <HAL_TIM_PWM_Start+0x92>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e80:	e00b      	b.n	8002e9a <HAL_TIM_PWM_Start+0xaa>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d104      	bne.n	8002e92 <HAL_TIM_PWM_Start+0xa2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e90:	e003      	b.n	8002e9a <HAL_TIM_PWM_Start+0xaa>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2202      	movs	r2, #2
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	6839      	ldr	r1, [r7, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fc50 	bl	8003748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1e      	ldr	r2, [pc, #120]	@ (8002f28 <HAL_TIM_PWM_Start+0x138>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d107      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a18      	ldr	r2, [pc, #96]	@ (8002f28 <HAL_TIM_PWM_Start+0x138>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_TIM_PWM_Start+0xfa>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed4:	d009      	beq.n	8002eea <HAL_TIM_PWM_Start+0xfa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a14      	ldr	r2, [pc, #80]	@ (8002f2c <HAL_TIM_PWM_Start+0x13c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_TIM_PWM_Start+0xfa>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a12      	ldr	r2, [pc, #72]	@ (8002f30 <HAL_TIM_PWM_Start+0x140>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b06      	cmp	r3, #6
 8002efa:	d010      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0c:	e007      	b.n	8002f1e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800

08002f34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e0ae      	b.n	80030b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	f200 809f 	bhi.w	80030a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f62:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f9d 	.word	0x08002f9d
 8002f6c:	080030a1 	.word	0x080030a1
 8002f70:	080030a1 	.word	0x080030a1
 8002f74:	080030a1 	.word	0x080030a1
 8002f78:	08002fdd 	.word	0x08002fdd
 8002f7c:	080030a1 	.word	0x080030a1
 8002f80:	080030a1 	.word	0x080030a1
 8002f84:	080030a1 	.word	0x080030a1
 8002f88:	0800301f 	.word	0x0800301f
 8002f8c:	080030a1 	.word	0x080030a1
 8002f90:	080030a1 	.word	0x080030a1
 8002f94:	080030a1 	.word	0x080030a1
 8002f98:	0800305f 	.word	0x0800305f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f9b2 	bl	800330c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0208 	orr.w	r2, r2, #8
 8002fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0204 	bic.w	r2, r2, #4
 8002fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6999      	ldr	r1, [r3, #24]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	619a      	str	r2, [r3, #24]
      break;
 8002fda:	e064      	b.n	80030a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f9f8 	bl	80033d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6999      	ldr	r1, [r3, #24]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	021a      	lsls	r2, r3, #8
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	619a      	str	r2, [r3, #24]
      break;
 800301c:	e043      	b.n	80030a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fa41 	bl	80034ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0208 	orr.w	r2, r2, #8
 8003038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0204 	bic.w	r2, r2, #4
 8003048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69d9      	ldr	r1, [r3, #28]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	61da      	str	r2, [r3, #28]
      break;
 800305c:	e023      	b.n	80030a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fa8b 	bl	8003580 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69d9      	ldr	r1, [r3, #28]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	021a      	lsls	r2, r3, #8
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	61da      	str	r2, [r3, #28]
      break;
 800309e:	e002      	b.n	80030a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
      break;
 80030a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIM_ConfigClockSource+0x1c>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0b4      	b.n	800323e <HAL_TIM_ConfigClockSource+0x186>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310c:	d03e      	beq.n	800318c <HAL_TIM_ConfigClockSource+0xd4>
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003112:	f200 8087 	bhi.w	8003224 <HAL_TIM_ConfigClockSource+0x16c>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311a:	f000 8086 	beq.w	800322a <HAL_TIM_ConfigClockSource+0x172>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003122:	d87f      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b70      	cmp	r3, #112	@ 0x70
 8003126:	d01a      	beq.n	800315e <HAL_TIM_ConfigClockSource+0xa6>
 8003128:	2b70      	cmp	r3, #112	@ 0x70
 800312a:	d87b      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b60      	cmp	r3, #96	@ 0x60
 800312e:	d050      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003130:	2b60      	cmp	r3, #96	@ 0x60
 8003132:	d877      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b50      	cmp	r3, #80	@ 0x50
 8003136:	d03c      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003138:	2b50      	cmp	r3, #80	@ 0x50
 800313a:	d873      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d058      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	d86f      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b30      	cmp	r3, #48	@ 0x30
 8003146:	d064      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x15a>
 8003148:	2b30      	cmp	r3, #48	@ 0x30
 800314a:	d86b      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d060      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	2b20      	cmp	r3, #32
 8003152:	d867      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d05c      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	2b10      	cmp	r3, #16
 800315a:	d05a      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x15a>
 800315c:	e062      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800316e:	f000 facc 	bl	800370a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	609a      	str	r2, [r3, #8]
      break;
 800318a:	e04f      	b.n	800322c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800319c:	f000 fab5 	bl	800370a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ae:	609a      	str	r2, [r3, #8]
      break;
 80031b0:	e03c      	b.n	800322c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fa2c 	bl	800361c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2150      	movs	r1, #80	@ 0x50
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fa83 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 80031d0:	e02c      	b.n	800322c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031de:	461a      	mov	r2, r3
 80031e0:	f000 fa4a 	bl	8003678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2160      	movs	r1, #96	@ 0x60
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fa73 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 80031f0:	e01c      	b.n	800322c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fe:	461a      	mov	r2, r3
 8003200:	f000 fa0c 	bl	800361c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2140      	movs	r1, #64	@ 0x40
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fa63 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8003210:	e00c      	b.n	800322c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f000 fa5a 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8003222:	e003      	b.n	800322c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      break;
 8003228:	e000      	b.n	800322c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800322a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a29      	ldr	r2, [pc, #164]	@ (8003300 <TIM_Base_SetConfig+0xb8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00b      	beq.n	8003278 <TIM_Base_SetConfig+0x30>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003266:	d007      	beq.n	8003278 <TIM_Base_SetConfig+0x30>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a26      	ldr	r2, [pc, #152]	@ (8003304 <TIM_Base_SetConfig+0xbc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0x30>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a25      	ldr	r2, [pc, #148]	@ (8003308 <TIM_Base_SetConfig+0xc0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d108      	bne.n	800328a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <TIM_Base_SetConfig+0xb8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_Base_SetConfig+0x62>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003298:	d007      	beq.n	80032aa <TIM_Base_SetConfig+0x62>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <TIM_Base_SetConfig+0xbc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0x62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <TIM_Base_SetConfig+0xc0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a07      	ldr	r2, [pc, #28]	@ (8003300 <TIM_Base_SetConfig+0xb8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d103      	bne.n	80032f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	615a      	str	r2, [r3, #20]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800

0800330c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 0201 	bic.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0302 	bic.w	r3, r3, #2
 8003354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1c      	ldr	r2, [pc, #112]	@ (80033d4 <TIM_OC1_SetConfig+0xc8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d10c      	bne.n	8003382 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f023 0308 	bic.w	r3, r3, #8
 800336e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a13      	ldr	r2, [pc, #76]	@ (80033d4 <TIM_OC1_SetConfig+0xc8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40012c00 	.word	0x40012c00

080033d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 0210 	bic.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800340e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0320 	bic.w	r3, r3, #32
 8003422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <TIM_OC2_SetConfig+0xd0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d10d      	bne.n	8003454 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800343e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a14      	ldr	r2, [pc, #80]	@ (80034a8 <TIM_OC2_SetConfig+0xd0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d113      	bne.n	8003484 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00

080034ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <TIM_OC3_SetConfig+0xd0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10d      	bne.n	8003526 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a14      	ldr	r2, [pc, #80]	@ (800357c <TIM_OC3_SetConfig+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	621a      	str	r2, [r3, #32]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40012c00 	.word	0x40012c00

08003580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	031b      	lsls	r3, r3, #12
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0f      	ldr	r2, [pc, #60]	@ (8003618 <TIM_OC4_SetConfig+0x98>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d109      	bne.n	80035f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	40012c00 	.word	0x40012c00

0800361c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f023 030a 	bic.w	r3, r3, #10
 8003658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f023 0210 	bic.w	r2, r3, #16
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	031b      	lsls	r3, r3, #12
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f043 0307 	orr.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b087      	sub	sp, #28
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003724:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	431a      	orrs	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	609a      	str	r2, [r3, #8]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2201      	movs	r2, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e046      	b.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a16      	ldr	r2, [pc, #88]	@ (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f4:	d009      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a12      	ldr	r2, [pc, #72]	@ (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a10      	ldr	r2, [pc, #64]	@ (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10c      	bne.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800

0800384c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e042      	b.n	80038e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fb4c 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	@ 0x24
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800388e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f92b 	bl	8003aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	@ 0x28
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	d17c      	bne.n	8003a06 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_UART_Receive+0x2c>
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e075      	b.n	8003a08 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2222      	movs	r2, #34	@ 0x22
 8003926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003930:	f7fd fc82 	bl	8001238 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	d108      	bne.n	800395e <HAL_UART_Receive+0x72>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	e003      	b.n	8003966 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003966:	e043      	b.n	80039f0 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2200      	movs	r2, #0
 8003970:	2120      	movs	r1, #32
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f84c 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e042      	b.n	8003a08 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10c      	bne.n	80039a2 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003994:	b29a      	uxth	r2, r3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	3302      	adds	r3, #2
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	e01f      	b.n	80039e2 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039aa:	d007      	beq.n	80039bc <HAL_UART_Receive+0xd0>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_UART_Receive+0xde>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e008      	b.n	80039dc <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1b6      	bne.n	8003968 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b090      	sub	sp, #64	@ 0x40
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a20:	e050      	b.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d04c      	beq.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a30:	f7fd fc02 	bl	8001238 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d241      	bcs.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a60:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a62:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e5      	bne.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	613b      	str	r3, [r7, #16]
   return(result);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3314      	adds	r3, #20
 8003a92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a94:	623a      	str	r2, [r7, #32]
 8003a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	69f9      	ldr	r1, [r7, #28]
 8003a9a:	6a3a      	ldr	r2, [r7, #32]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e5      	bne.n	8003a74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e00f      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d09f      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3740      	adds	r7, #64	@ 0x40
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b26:	f023 030c 	bic.w	r3, r3, #12
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c00 <UART_SetConfig+0x114>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d103      	bne.n	8003b5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7ff f872 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	e002      	b.n	8003b62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f7ff f85a 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 8003b60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	4a22      	ldr	r2, [pc, #136]	@ (8003c04 <UART_SetConfig+0x118>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	0119      	lsls	r1, r3, #4
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009a      	lsls	r2, r3, #2
 8003b8c:	441a      	add	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b98:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <UART_SetConfig+0x118>)
 8003b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2064      	movs	r0, #100	@ 0x64
 8003ba2:	fb00 f303 	mul.w	r3, r0, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	3332      	adds	r3, #50	@ 0x32
 8003bac:	4a15      	ldr	r2, [pc, #84]	@ (8003c04 <UART_SetConfig+0x118>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb8:	4419      	add	r1, r3
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <UART_SetConfig+0x118>)
 8003bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2064      	movs	r0, #100	@ 0x64
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	3332      	adds	r3, #50	@ 0x32
 8003be4:	4a07      	ldr	r2, [pc, #28]	@ (8003c04 <UART_SetConfig+0x118>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40013800 	.word	0x40013800
 8003c04:	51eb851f 	.word	0x51eb851f

08003c08 <std>:
 8003c08:	2300      	movs	r3, #0
 8003c0a:	b510      	push	{r4, lr}
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c16:	6083      	str	r3, [r0, #8]
 8003c18:	8181      	strh	r1, [r0, #12]
 8003c1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c1c:	81c2      	strh	r2, [r0, #14]
 8003c1e:	6183      	str	r3, [r0, #24]
 8003c20:	4619      	mov	r1, r3
 8003c22:	2208      	movs	r2, #8
 8003c24:	305c      	adds	r0, #92	@ 0x5c
 8003c26:	f000 f906 	bl	8003e36 <memset>
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <std+0x58>)
 8003c2c:	6224      	str	r4, [r4, #32]
 8003c2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c30:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <std+0x5c>)
 8003c32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c34:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <std+0x60>)
 8003c36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c38:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <std+0x64>)
 8003c3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <std+0x68>)
 8003c3e:	429c      	cmp	r4, r3
 8003c40:	d006      	beq.n	8003c50 <std+0x48>
 8003c42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c46:	4294      	cmp	r4, r2
 8003c48:	d002      	beq.n	8003c50 <std+0x48>
 8003c4a:	33d0      	adds	r3, #208	@ 0xd0
 8003c4c:	429c      	cmp	r4, r3
 8003c4e:	d105      	bne.n	8003c5c <std+0x54>
 8003c50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c58:	f000 b966 	b.w	8003f28 <__retarget_lock_init_recursive>
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	bf00      	nop
 8003c60:	08003db1 	.word	0x08003db1
 8003c64:	08003dd3 	.word	0x08003dd3
 8003c68:	08003e0b 	.word	0x08003e0b
 8003c6c:	08003e2f 	.word	0x08003e2f
 8003c70:	200001a8 	.word	0x200001a8

08003c74 <stdio_exit_handler>:
 8003c74:	4a02      	ldr	r2, [pc, #8]	@ (8003c80 <stdio_exit_handler+0xc>)
 8003c76:	4903      	ldr	r1, [pc, #12]	@ (8003c84 <stdio_exit_handler+0x10>)
 8003c78:	4803      	ldr	r0, [pc, #12]	@ (8003c88 <stdio_exit_handler+0x14>)
 8003c7a:	f000 b869 	b.w	8003d50 <_fwalk_sglue>
 8003c7e:	bf00      	nop
 8003c80:	2000000c 	.word	0x2000000c
 8003c84:	080047c1 	.word	0x080047c1
 8003c88:	2000001c 	.word	0x2000001c

08003c8c <cleanup_stdio>:
 8003c8c:	6841      	ldr	r1, [r0, #4]
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc0 <cleanup_stdio+0x34>)
 8003c90:	b510      	push	{r4, lr}
 8003c92:	4299      	cmp	r1, r3
 8003c94:	4604      	mov	r4, r0
 8003c96:	d001      	beq.n	8003c9c <cleanup_stdio+0x10>
 8003c98:	f000 fd92 	bl	80047c0 <_fflush_r>
 8003c9c:	68a1      	ldr	r1, [r4, #8]
 8003c9e:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <cleanup_stdio+0x38>)
 8003ca0:	4299      	cmp	r1, r3
 8003ca2:	d002      	beq.n	8003caa <cleanup_stdio+0x1e>
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f000 fd8b 	bl	80047c0 <_fflush_r>
 8003caa:	68e1      	ldr	r1, [r4, #12]
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <cleanup_stdio+0x3c>)
 8003cae:	4299      	cmp	r1, r3
 8003cb0:	d004      	beq.n	8003cbc <cleanup_stdio+0x30>
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb8:	f000 bd82 	b.w	80047c0 <_fflush_r>
 8003cbc:	bd10      	pop	{r4, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200001a8 	.word	0x200001a8
 8003cc4:	20000210 	.word	0x20000210
 8003cc8:	20000278 	.word	0x20000278

08003ccc <global_stdio_init.part.0>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <global_stdio_init.part.0+0x30>)
 8003cd0:	4c0b      	ldr	r4, [pc, #44]	@ (8003d00 <global_stdio_init.part.0+0x34>)
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d04 <global_stdio_init.part.0+0x38>)
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	2104      	movs	r1, #4
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f7ff ff94 	bl	8003c08 <std>
 8003ce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	2109      	movs	r1, #9
 8003ce8:	f7ff ff8e 	bl	8003c08 <std>
 8003cec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf6:	2112      	movs	r1, #18
 8003cf8:	f7ff bf86 	b.w	8003c08 <std>
 8003cfc:	200002e0 	.word	0x200002e0
 8003d00:	200001a8 	.word	0x200001a8
 8003d04:	08003c75 	.word	0x08003c75

08003d08 <__sfp_lock_acquire>:
 8003d08:	4801      	ldr	r0, [pc, #4]	@ (8003d10 <__sfp_lock_acquire+0x8>)
 8003d0a:	f000 b90e 	b.w	8003f2a <__retarget_lock_acquire_recursive>
 8003d0e:	bf00      	nop
 8003d10:	200002e9 	.word	0x200002e9

08003d14 <__sfp_lock_release>:
 8003d14:	4801      	ldr	r0, [pc, #4]	@ (8003d1c <__sfp_lock_release+0x8>)
 8003d16:	f000 b909 	b.w	8003f2c <__retarget_lock_release_recursive>
 8003d1a:	bf00      	nop
 8003d1c:	200002e9 	.word	0x200002e9

08003d20 <__sinit>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4604      	mov	r4, r0
 8003d24:	f7ff fff0 	bl	8003d08 <__sfp_lock_acquire>
 8003d28:	6a23      	ldr	r3, [r4, #32]
 8003d2a:	b11b      	cbz	r3, 8003d34 <__sinit+0x14>
 8003d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d30:	f7ff bff0 	b.w	8003d14 <__sfp_lock_release>
 8003d34:	4b04      	ldr	r3, [pc, #16]	@ (8003d48 <__sinit+0x28>)
 8003d36:	6223      	str	r3, [r4, #32]
 8003d38:	4b04      	ldr	r3, [pc, #16]	@ (8003d4c <__sinit+0x2c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f5      	bne.n	8003d2c <__sinit+0xc>
 8003d40:	f7ff ffc4 	bl	8003ccc <global_stdio_init.part.0>
 8003d44:	e7f2      	b.n	8003d2c <__sinit+0xc>
 8003d46:	bf00      	nop
 8003d48:	08003c8d 	.word	0x08003c8d
 8003d4c:	200002e0 	.word	0x200002e0

08003d50 <_fwalk_sglue>:
 8003d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d54:	4607      	mov	r7, r0
 8003d56:	4688      	mov	r8, r1
 8003d58:	4614      	mov	r4, r2
 8003d5a:	2600      	movs	r6, #0
 8003d5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d60:	f1b9 0901 	subs.w	r9, r9, #1
 8003d64:	d505      	bpl.n	8003d72 <_fwalk_sglue+0x22>
 8003d66:	6824      	ldr	r4, [r4, #0]
 8003d68:	2c00      	cmp	r4, #0
 8003d6a:	d1f7      	bne.n	8003d5c <_fwalk_sglue+0xc>
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d72:	89ab      	ldrh	r3, [r5, #12]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d907      	bls.n	8003d88 <_fwalk_sglue+0x38>
 8003d78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	d003      	beq.n	8003d88 <_fwalk_sglue+0x38>
 8003d80:	4629      	mov	r1, r5
 8003d82:	4638      	mov	r0, r7
 8003d84:	47c0      	blx	r8
 8003d86:	4306      	orrs	r6, r0
 8003d88:	3568      	adds	r5, #104	@ 0x68
 8003d8a:	e7e9      	b.n	8003d60 <_fwalk_sglue+0x10>

08003d8c <iprintf>:
 8003d8c:	b40f      	push	{r0, r1, r2, r3}
 8003d8e:	b507      	push	{r0, r1, r2, lr}
 8003d90:	4906      	ldr	r1, [pc, #24]	@ (8003dac <iprintf+0x20>)
 8003d92:	ab04      	add	r3, sp, #16
 8003d94:	6808      	ldr	r0, [r1, #0]
 8003d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d9a:	6881      	ldr	r1, [r0, #8]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	f000 f9e5 	bl	800416c <_vfiprintf_r>
 8003da2:	b003      	add	sp, #12
 8003da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003da8:	b004      	add	sp, #16
 8003daa:	4770      	bx	lr
 8003dac:	20000018 	.word	0x20000018

08003db0 <__sread>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	460c      	mov	r4, r1
 8003db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db8:	f000 f868 	bl	8003e8c <_read_r>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	bfab      	itete	ge
 8003dc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003dc4:	181b      	addge	r3, r3, r0
 8003dc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dca:	bfac      	ite	ge
 8003dcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dce:	81a3      	strhlt	r3, [r4, #12]
 8003dd0:	bd10      	pop	{r4, pc}

08003dd2 <__swrite>:
 8003dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd6:	461f      	mov	r7, r3
 8003dd8:	898b      	ldrh	r3, [r1, #12]
 8003dda:	4605      	mov	r5, r0
 8003ddc:	05db      	lsls	r3, r3, #23
 8003dde:	460c      	mov	r4, r1
 8003de0:	4616      	mov	r6, r2
 8003de2:	d505      	bpl.n	8003df0 <__swrite+0x1e>
 8003de4:	2302      	movs	r3, #2
 8003de6:	2200      	movs	r2, #0
 8003de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dec:	f000 f83c 	bl	8003e68 <_lseek_r>
 8003df0:	89a3      	ldrh	r3, [r4, #12]
 8003df2:	4632      	mov	r2, r6
 8003df4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	f000 b853 	b.w	8003eb0 <_write_r>

08003e0a <__sseek>:
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e12:	f000 f829 	bl	8003e68 <_lseek_r>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	bf15      	itete	ne
 8003e1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e26:	81a3      	strheq	r3, [r4, #12]
 8003e28:	bf18      	it	ne
 8003e2a:	81a3      	strhne	r3, [r4, #12]
 8003e2c:	bd10      	pop	{r4, pc}

08003e2e <__sclose>:
 8003e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e32:	f000 b809 	b.w	8003e48 <_close_r>

08003e36 <memset>:
 8003e36:	4603      	mov	r3, r0
 8003e38:	4402      	add	r2, r0
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d100      	bne.n	8003e40 <memset+0xa>
 8003e3e:	4770      	bx	lr
 8003e40:	f803 1b01 	strb.w	r1, [r3], #1
 8003e44:	e7f9      	b.n	8003e3a <memset+0x4>
	...

08003e48 <_close_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	4d05      	ldr	r5, [pc, #20]	@ (8003e64 <_close_r+0x1c>)
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	602b      	str	r3, [r5, #0]
 8003e54:	f7fd f905 	bl	8001062 <_close>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d102      	bne.n	8003e62 <_close_r+0x1a>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	b103      	cbz	r3, 8003e62 <_close_r+0x1a>
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	200002e4 	.word	0x200002e4

08003e68 <_lseek_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	2200      	movs	r2, #0
 8003e72:	4d05      	ldr	r5, [pc, #20]	@ (8003e88 <_lseek_r+0x20>)
 8003e74:	602a      	str	r2, [r5, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f7fd f917 	bl	80010aa <_lseek>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_lseek_r+0x1e>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_lseek_r+0x1e>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	200002e4 	.word	0x200002e4

08003e8c <_read_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	2200      	movs	r2, #0
 8003e96:	4d05      	ldr	r5, [pc, #20]	@ (8003eac <_read_r+0x20>)
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f7fd f8c4 	bl	8001028 <_read>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d102      	bne.n	8003eaa <_read_r+0x1e>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	b103      	cbz	r3, 8003eaa <_read_r+0x1e>
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	200002e4 	.word	0x200002e4

08003eb0 <_write_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4d05      	ldr	r5, [pc, #20]	@ (8003ed0 <_write_r+0x20>)
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f7fc ff18 	bl	8000cf4 <_write>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_write_r+0x1e>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_write_r+0x1e>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	200002e4 	.word	0x200002e4

08003ed4 <__errno>:
 8003ed4:	4b01      	ldr	r3, [pc, #4]	@ (8003edc <__errno+0x8>)
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000018 	.word	0x20000018

08003ee0 <__libc_init_array>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	2600      	movs	r6, #0
 8003ee4:	4d0c      	ldr	r5, [pc, #48]	@ (8003f18 <__libc_init_array+0x38>)
 8003ee6:	4c0d      	ldr	r4, [pc, #52]	@ (8003f1c <__libc_init_array+0x3c>)
 8003ee8:	1b64      	subs	r4, r4, r5
 8003eea:	10a4      	asrs	r4, r4, #2
 8003eec:	42a6      	cmp	r6, r4
 8003eee:	d109      	bne.n	8003f04 <__libc_init_array+0x24>
 8003ef0:	f000 fdc4 	bl	8004a7c <_init>
 8003ef4:	2600      	movs	r6, #0
 8003ef6:	4d0a      	ldr	r5, [pc, #40]	@ (8003f20 <__libc_init_array+0x40>)
 8003ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8003f24 <__libc_init_array+0x44>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	42a6      	cmp	r6, r4
 8003f00:	d105      	bne.n	8003f0e <__libc_init_array+0x2e>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f08:	4798      	blx	r3
 8003f0a:	3601      	adds	r6, #1
 8003f0c:	e7ee      	b.n	8003eec <__libc_init_array+0xc>
 8003f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f12:	4798      	blx	r3
 8003f14:	3601      	adds	r6, #1
 8003f16:	e7f2      	b.n	8003efe <__libc_init_array+0x1e>
 8003f18:	08004b10 	.word	0x08004b10
 8003f1c:	08004b10 	.word	0x08004b10
 8003f20:	08004b10 	.word	0x08004b10
 8003f24:	08004b14 	.word	0x08004b14

08003f28 <__retarget_lock_init_recursive>:
 8003f28:	4770      	bx	lr

08003f2a <__retarget_lock_acquire_recursive>:
 8003f2a:	4770      	bx	lr

08003f2c <__retarget_lock_release_recursive>:
 8003f2c:	4770      	bx	lr
	...

08003f30 <_free_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4605      	mov	r5, r0
 8003f34:	2900      	cmp	r1, #0
 8003f36:	d040      	beq.n	8003fba <_free_r+0x8a>
 8003f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f3c:	1f0c      	subs	r4, r1, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bfb8      	it	lt
 8003f42:	18e4      	addlt	r4, r4, r3
 8003f44:	f000 f8de 	bl	8004104 <__malloc_lock>
 8003f48:	4a1c      	ldr	r2, [pc, #112]	@ (8003fbc <_free_r+0x8c>)
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	b933      	cbnz	r3, 8003f5c <_free_r+0x2c>
 8003f4e:	6063      	str	r3, [r4, #4]
 8003f50:	6014      	str	r4, [r2, #0]
 8003f52:	4628      	mov	r0, r5
 8003f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f58:	f000 b8da 	b.w	8004110 <__malloc_unlock>
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d908      	bls.n	8003f72 <_free_r+0x42>
 8003f60:	6820      	ldr	r0, [r4, #0]
 8003f62:	1821      	adds	r1, r4, r0
 8003f64:	428b      	cmp	r3, r1
 8003f66:	bf01      	itttt	eq
 8003f68:	6819      	ldreq	r1, [r3, #0]
 8003f6a:	685b      	ldreq	r3, [r3, #4]
 8003f6c:	1809      	addeq	r1, r1, r0
 8003f6e:	6021      	streq	r1, [r4, #0]
 8003f70:	e7ed      	b.n	8003f4e <_free_r+0x1e>
 8003f72:	461a      	mov	r2, r3
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b10b      	cbz	r3, 8003f7c <_free_r+0x4c>
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	d9fa      	bls.n	8003f72 <_free_r+0x42>
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	1850      	adds	r0, r2, r1
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d10b      	bne.n	8003f9c <_free_r+0x6c>
 8003f84:	6820      	ldr	r0, [r4, #0]
 8003f86:	4401      	add	r1, r0
 8003f88:	1850      	adds	r0, r2, r1
 8003f8a:	4283      	cmp	r3, r0
 8003f8c:	6011      	str	r1, [r2, #0]
 8003f8e:	d1e0      	bne.n	8003f52 <_free_r+0x22>
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4408      	add	r0, r1
 8003f96:	6010      	str	r0, [r2, #0]
 8003f98:	6053      	str	r3, [r2, #4]
 8003f9a:	e7da      	b.n	8003f52 <_free_r+0x22>
 8003f9c:	d902      	bls.n	8003fa4 <_free_r+0x74>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	e7d6      	b.n	8003f52 <_free_r+0x22>
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	1821      	adds	r1, r4, r0
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	bf01      	itttt	eq
 8003fac:	6819      	ldreq	r1, [r3, #0]
 8003fae:	685b      	ldreq	r3, [r3, #4]
 8003fb0:	1809      	addeq	r1, r1, r0
 8003fb2:	6021      	streq	r1, [r4, #0]
 8003fb4:	6063      	str	r3, [r4, #4]
 8003fb6:	6054      	str	r4, [r2, #4]
 8003fb8:	e7cb      	b.n	8003f52 <_free_r+0x22>
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	200002f0 	.word	0x200002f0

08003fc0 <sbrk_aligned>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8004000 <sbrk_aligned+0x40>)
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	6831      	ldr	r1, [r6, #0]
 8003fc8:	4605      	mov	r5, r0
 8003fca:	b911      	cbnz	r1, 8003fd2 <sbrk_aligned+0x12>
 8003fcc:	f000 fcb4 	bl	8004938 <_sbrk_r>
 8003fd0:	6030      	str	r0, [r6, #0]
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	f000 fcaf 	bl	8004938 <_sbrk_r>
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	d103      	bne.n	8003fe6 <sbrk_aligned+0x26>
 8003fde:	f04f 34ff 	mov.w	r4, #4294967295
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	bd70      	pop	{r4, r5, r6, pc}
 8003fe6:	1cc4      	adds	r4, r0, #3
 8003fe8:	f024 0403 	bic.w	r4, r4, #3
 8003fec:	42a0      	cmp	r0, r4
 8003fee:	d0f8      	beq.n	8003fe2 <sbrk_aligned+0x22>
 8003ff0:	1a21      	subs	r1, r4, r0
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fca0 	bl	8004938 <_sbrk_r>
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d1f2      	bne.n	8003fe2 <sbrk_aligned+0x22>
 8003ffc:	e7ef      	b.n	8003fde <sbrk_aligned+0x1e>
 8003ffe:	bf00      	nop
 8004000:	200002ec 	.word	0x200002ec

08004004 <_malloc_r>:
 8004004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004008:	1ccd      	adds	r5, r1, #3
 800400a:	f025 0503 	bic.w	r5, r5, #3
 800400e:	3508      	adds	r5, #8
 8004010:	2d0c      	cmp	r5, #12
 8004012:	bf38      	it	cc
 8004014:	250c      	movcc	r5, #12
 8004016:	2d00      	cmp	r5, #0
 8004018:	4606      	mov	r6, r0
 800401a:	db01      	blt.n	8004020 <_malloc_r+0x1c>
 800401c:	42a9      	cmp	r1, r5
 800401e:	d904      	bls.n	800402a <_malloc_r+0x26>
 8004020:	230c      	movs	r3, #12
 8004022:	6033      	str	r3, [r6, #0]
 8004024:	2000      	movs	r0, #0
 8004026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800402a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004100 <_malloc_r+0xfc>
 800402e:	f000 f869 	bl	8004104 <__malloc_lock>
 8004032:	f8d8 3000 	ldr.w	r3, [r8]
 8004036:	461c      	mov	r4, r3
 8004038:	bb44      	cbnz	r4, 800408c <_malloc_r+0x88>
 800403a:	4629      	mov	r1, r5
 800403c:	4630      	mov	r0, r6
 800403e:	f7ff ffbf 	bl	8003fc0 <sbrk_aligned>
 8004042:	1c43      	adds	r3, r0, #1
 8004044:	4604      	mov	r4, r0
 8004046:	d158      	bne.n	80040fa <_malloc_r+0xf6>
 8004048:	f8d8 4000 	ldr.w	r4, [r8]
 800404c:	4627      	mov	r7, r4
 800404e:	2f00      	cmp	r7, #0
 8004050:	d143      	bne.n	80040da <_malloc_r+0xd6>
 8004052:	2c00      	cmp	r4, #0
 8004054:	d04b      	beq.n	80040ee <_malloc_r+0xea>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	4639      	mov	r1, r7
 800405a:	4630      	mov	r0, r6
 800405c:	eb04 0903 	add.w	r9, r4, r3
 8004060:	f000 fc6a 	bl	8004938 <_sbrk_r>
 8004064:	4581      	cmp	r9, r0
 8004066:	d142      	bne.n	80040ee <_malloc_r+0xea>
 8004068:	6821      	ldr	r1, [r4, #0]
 800406a:	4630      	mov	r0, r6
 800406c:	1a6d      	subs	r5, r5, r1
 800406e:	4629      	mov	r1, r5
 8004070:	f7ff ffa6 	bl	8003fc0 <sbrk_aligned>
 8004074:	3001      	adds	r0, #1
 8004076:	d03a      	beq.n	80040ee <_malloc_r+0xea>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	442b      	add	r3, r5
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	f8d8 3000 	ldr.w	r3, [r8]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	bb62      	cbnz	r2, 80040e0 <_malloc_r+0xdc>
 8004086:	f8c8 7000 	str.w	r7, [r8]
 800408a:	e00f      	b.n	80040ac <_malloc_r+0xa8>
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	1b52      	subs	r2, r2, r5
 8004090:	d420      	bmi.n	80040d4 <_malloc_r+0xd0>
 8004092:	2a0b      	cmp	r2, #11
 8004094:	d917      	bls.n	80040c6 <_malloc_r+0xc2>
 8004096:	1961      	adds	r1, r4, r5
 8004098:	42a3      	cmp	r3, r4
 800409a:	6025      	str	r5, [r4, #0]
 800409c:	bf18      	it	ne
 800409e:	6059      	strne	r1, [r3, #4]
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	bf08      	it	eq
 80040a4:	f8c8 1000 	streq.w	r1, [r8]
 80040a8:	5162      	str	r2, [r4, r5]
 80040aa:	604b      	str	r3, [r1, #4]
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f82f 	bl	8004110 <__malloc_unlock>
 80040b2:	f104 000b 	add.w	r0, r4, #11
 80040b6:	1d23      	adds	r3, r4, #4
 80040b8:	f020 0007 	bic.w	r0, r0, #7
 80040bc:	1ac2      	subs	r2, r0, r3
 80040be:	bf1c      	itt	ne
 80040c0:	1a1b      	subne	r3, r3, r0
 80040c2:	50a3      	strne	r3, [r4, r2]
 80040c4:	e7af      	b.n	8004026 <_malloc_r+0x22>
 80040c6:	6862      	ldr	r2, [r4, #4]
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	bf0c      	ite	eq
 80040cc:	f8c8 2000 	streq.w	r2, [r8]
 80040d0:	605a      	strne	r2, [r3, #4]
 80040d2:	e7eb      	b.n	80040ac <_malloc_r+0xa8>
 80040d4:	4623      	mov	r3, r4
 80040d6:	6864      	ldr	r4, [r4, #4]
 80040d8:	e7ae      	b.n	8004038 <_malloc_r+0x34>
 80040da:	463c      	mov	r4, r7
 80040dc:	687f      	ldr	r7, [r7, #4]
 80040de:	e7b6      	b.n	800404e <_malloc_r+0x4a>
 80040e0:	461a      	mov	r2, r3
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d1fb      	bne.n	80040e0 <_malloc_r+0xdc>
 80040e8:	2300      	movs	r3, #0
 80040ea:	6053      	str	r3, [r2, #4]
 80040ec:	e7de      	b.n	80040ac <_malloc_r+0xa8>
 80040ee:	230c      	movs	r3, #12
 80040f0:	4630      	mov	r0, r6
 80040f2:	6033      	str	r3, [r6, #0]
 80040f4:	f000 f80c 	bl	8004110 <__malloc_unlock>
 80040f8:	e794      	b.n	8004024 <_malloc_r+0x20>
 80040fa:	6005      	str	r5, [r0, #0]
 80040fc:	e7d6      	b.n	80040ac <_malloc_r+0xa8>
 80040fe:	bf00      	nop
 8004100:	200002f0 	.word	0x200002f0

08004104 <__malloc_lock>:
 8004104:	4801      	ldr	r0, [pc, #4]	@ (800410c <__malloc_lock+0x8>)
 8004106:	f7ff bf10 	b.w	8003f2a <__retarget_lock_acquire_recursive>
 800410a:	bf00      	nop
 800410c:	200002e8 	.word	0x200002e8

08004110 <__malloc_unlock>:
 8004110:	4801      	ldr	r0, [pc, #4]	@ (8004118 <__malloc_unlock+0x8>)
 8004112:	f7ff bf0b 	b.w	8003f2c <__retarget_lock_release_recursive>
 8004116:	bf00      	nop
 8004118:	200002e8 	.word	0x200002e8

0800411c <__sfputc_r>:
 800411c:	6893      	ldr	r3, [r2, #8]
 800411e:	b410      	push	{r4}
 8004120:	3b01      	subs	r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	6093      	str	r3, [r2, #8]
 8004126:	da07      	bge.n	8004138 <__sfputc_r+0x1c>
 8004128:	6994      	ldr	r4, [r2, #24]
 800412a:	42a3      	cmp	r3, r4
 800412c:	db01      	blt.n	8004132 <__sfputc_r+0x16>
 800412e:	290a      	cmp	r1, #10
 8004130:	d102      	bne.n	8004138 <__sfputc_r+0x1c>
 8004132:	bc10      	pop	{r4}
 8004134:	f000 bb6c 	b.w	8004810 <__swbuf_r>
 8004138:	6813      	ldr	r3, [r2, #0]
 800413a:	1c58      	adds	r0, r3, #1
 800413c:	6010      	str	r0, [r2, #0]
 800413e:	7019      	strb	r1, [r3, #0]
 8004140:	4608      	mov	r0, r1
 8004142:	bc10      	pop	{r4}
 8004144:	4770      	bx	lr

08004146 <__sfputs_r>:
 8004146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004148:	4606      	mov	r6, r0
 800414a:	460f      	mov	r7, r1
 800414c:	4614      	mov	r4, r2
 800414e:	18d5      	adds	r5, r2, r3
 8004150:	42ac      	cmp	r4, r5
 8004152:	d101      	bne.n	8004158 <__sfputs_r+0x12>
 8004154:	2000      	movs	r0, #0
 8004156:	e007      	b.n	8004168 <__sfputs_r+0x22>
 8004158:	463a      	mov	r2, r7
 800415a:	4630      	mov	r0, r6
 800415c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004160:	f7ff ffdc 	bl	800411c <__sfputc_r>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d1f3      	bne.n	8004150 <__sfputs_r+0xa>
 8004168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800416c <_vfiprintf_r>:
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	460d      	mov	r5, r1
 8004172:	4614      	mov	r4, r2
 8004174:	4698      	mov	r8, r3
 8004176:	4606      	mov	r6, r0
 8004178:	b09d      	sub	sp, #116	@ 0x74
 800417a:	b118      	cbz	r0, 8004184 <_vfiprintf_r+0x18>
 800417c:	6a03      	ldr	r3, [r0, #32]
 800417e:	b90b      	cbnz	r3, 8004184 <_vfiprintf_r+0x18>
 8004180:	f7ff fdce 	bl	8003d20 <__sinit>
 8004184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004186:	07d9      	lsls	r1, r3, #31
 8004188:	d405      	bmi.n	8004196 <_vfiprintf_r+0x2a>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	059a      	lsls	r2, r3, #22
 800418e:	d402      	bmi.n	8004196 <_vfiprintf_r+0x2a>
 8004190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004192:	f7ff feca 	bl	8003f2a <__retarget_lock_acquire_recursive>
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	071b      	lsls	r3, r3, #28
 800419a:	d501      	bpl.n	80041a0 <_vfiprintf_r+0x34>
 800419c:	692b      	ldr	r3, [r5, #16]
 800419e:	b99b      	cbnz	r3, 80041c8 <_vfiprintf_r+0x5c>
 80041a0:	4629      	mov	r1, r5
 80041a2:	4630      	mov	r0, r6
 80041a4:	f000 fb72 	bl	800488c <__swsetup_r>
 80041a8:	b170      	cbz	r0, 80041c8 <_vfiprintf_r+0x5c>
 80041aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041ac:	07dc      	lsls	r4, r3, #31
 80041ae:	d504      	bpl.n	80041ba <_vfiprintf_r+0x4e>
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
 80041b4:	b01d      	add	sp, #116	@ 0x74
 80041b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	0598      	lsls	r0, r3, #22
 80041be:	d4f7      	bmi.n	80041b0 <_vfiprintf_r+0x44>
 80041c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041c2:	f7ff feb3 	bl	8003f2c <__retarget_lock_release_recursive>
 80041c6:	e7f3      	b.n	80041b0 <_vfiprintf_r+0x44>
 80041c8:	2300      	movs	r3, #0
 80041ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80041cc:	2320      	movs	r3, #32
 80041ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041d2:	2330      	movs	r3, #48	@ 0x30
 80041d4:	f04f 0901 	mov.w	r9, #1
 80041d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80041dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004388 <_vfiprintf_r+0x21c>
 80041e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041e4:	4623      	mov	r3, r4
 80041e6:	469a      	mov	sl, r3
 80041e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ec:	b10a      	cbz	r2, 80041f2 <_vfiprintf_r+0x86>
 80041ee:	2a25      	cmp	r2, #37	@ 0x25
 80041f0:	d1f9      	bne.n	80041e6 <_vfiprintf_r+0x7a>
 80041f2:	ebba 0b04 	subs.w	fp, sl, r4
 80041f6:	d00b      	beq.n	8004210 <_vfiprintf_r+0xa4>
 80041f8:	465b      	mov	r3, fp
 80041fa:	4622      	mov	r2, r4
 80041fc:	4629      	mov	r1, r5
 80041fe:	4630      	mov	r0, r6
 8004200:	f7ff ffa1 	bl	8004146 <__sfputs_r>
 8004204:	3001      	adds	r0, #1
 8004206:	f000 80a7 	beq.w	8004358 <_vfiprintf_r+0x1ec>
 800420a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800420c:	445a      	add	r2, fp
 800420e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004210:	f89a 3000 	ldrb.w	r3, [sl]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 809f 	beq.w	8004358 <_vfiprintf_r+0x1ec>
 800421a:	2300      	movs	r3, #0
 800421c:	f04f 32ff 	mov.w	r2, #4294967295
 8004220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004224:	f10a 0a01 	add.w	sl, sl, #1
 8004228:	9304      	str	r3, [sp, #16]
 800422a:	9307      	str	r3, [sp, #28]
 800422c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004230:	931a      	str	r3, [sp, #104]	@ 0x68
 8004232:	4654      	mov	r4, sl
 8004234:	2205      	movs	r2, #5
 8004236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423a:	4853      	ldr	r0, [pc, #332]	@ (8004388 <_vfiprintf_r+0x21c>)
 800423c:	f000 fb8c 	bl	8004958 <memchr>
 8004240:	9a04      	ldr	r2, [sp, #16]
 8004242:	b9d8      	cbnz	r0, 800427c <_vfiprintf_r+0x110>
 8004244:	06d1      	lsls	r1, r2, #27
 8004246:	bf44      	itt	mi
 8004248:	2320      	movmi	r3, #32
 800424a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800424e:	0713      	lsls	r3, r2, #28
 8004250:	bf44      	itt	mi
 8004252:	232b      	movmi	r3, #43	@ 0x2b
 8004254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004258:	f89a 3000 	ldrb.w	r3, [sl]
 800425c:	2b2a      	cmp	r3, #42	@ 0x2a
 800425e:	d015      	beq.n	800428c <_vfiprintf_r+0x120>
 8004260:	4654      	mov	r4, sl
 8004262:	2000      	movs	r0, #0
 8004264:	f04f 0c0a 	mov.w	ip, #10
 8004268:	9a07      	ldr	r2, [sp, #28]
 800426a:	4621      	mov	r1, r4
 800426c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004270:	3b30      	subs	r3, #48	@ 0x30
 8004272:	2b09      	cmp	r3, #9
 8004274:	d94b      	bls.n	800430e <_vfiprintf_r+0x1a2>
 8004276:	b1b0      	cbz	r0, 80042a6 <_vfiprintf_r+0x13a>
 8004278:	9207      	str	r2, [sp, #28]
 800427a:	e014      	b.n	80042a6 <_vfiprintf_r+0x13a>
 800427c:	eba0 0308 	sub.w	r3, r0, r8
 8004280:	fa09 f303 	lsl.w	r3, r9, r3
 8004284:	4313      	orrs	r3, r2
 8004286:	46a2      	mov	sl, r4
 8004288:	9304      	str	r3, [sp, #16]
 800428a:	e7d2      	b.n	8004232 <_vfiprintf_r+0xc6>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	1d19      	adds	r1, r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	9103      	str	r1, [sp, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	bfbb      	ittet	lt
 8004298:	425b      	neglt	r3, r3
 800429a:	f042 0202 	orrlt.w	r2, r2, #2
 800429e:	9307      	strge	r3, [sp, #28]
 80042a0:	9307      	strlt	r3, [sp, #28]
 80042a2:	bfb8      	it	lt
 80042a4:	9204      	strlt	r2, [sp, #16]
 80042a6:	7823      	ldrb	r3, [r4, #0]
 80042a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80042aa:	d10a      	bne.n	80042c2 <_vfiprintf_r+0x156>
 80042ac:	7863      	ldrb	r3, [r4, #1]
 80042ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b0:	d132      	bne.n	8004318 <_vfiprintf_r+0x1ac>
 80042b2:	9b03      	ldr	r3, [sp, #12]
 80042b4:	3402      	adds	r4, #2
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	9203      	str	r2, [sp, #12]
 80042bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042c0:	9305      	str	r3, [sp, #20]
 80042c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800438c <_vfiprintf_r+0x220>
 80042c6:	2203      	movs	r2, #3
 80042c8:	4650      	mov	r0, sl
 80042ca:	7821      	ldrb	r1, [r4, #0]
 80042cc:	f000 fb44 	bl	8004958 <memchr>
 80042d0:	b138      	cbz	r0, 80042e2 <_vfiprintf_r+0x176>
 80042d2:	2240      	movs	r2, #64	@ 0x40
 80042d4:	9b04      	ldr	r3, [sp, #16]
 80042d6:	eba0 000a 	sub.w	r0, r0, sl
 80042da:	4082      	lsls	r2, r0
 80042dc:	4313      	orrs	r3, r2
 80042de:	3401      	adds	r4, #1
 80042e0:	9304      	str	r3, [sp, #16]
 80042e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e6:	2206      	movs	r2, #6
 80042e8:	4829      	ldr	r0, [pc, #164]	@ (8004390 <_vfiprintf_r+0x224>)
 80042ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042ee:	f000 fb33 	bl	8004958 <memchr>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d03f      	beq.n	8004376 <_vfiprintf_r+0x20a>
 80042f6:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <_vfiprintf_r+0x228>)
 80042f8:	bb1b      	cbnz	r3, 8004342 <_vfiprintf_r+0x1d6>
 80042fa:	9b03      	ldr	r3, [sp, #12]
 80042fc:	3307      	adds	r3, #7
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	3308      	adds	r3, #8
 8004304:	9303      	str	r3, [sp, #12]
 8004306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004308:	443b      	add	r3, r7
 800430a:	9309      	str	r3, [sp, #36]	@ 0x24
 800430c:	e76a      	b.n	80041e4 <_vfiprintf_r+0x78>
 800430e:	460c      	mov	r4, r1
 8004310:	2001      	movs	r0, #1
 8004312:	fb0c 3202 	mla	r2, ip, r2, r3
 8004316:	e7a8      	b.n	800426a <_vfiprintf_r+0xfe>
 8004318:	2300      	movs	r3, #0
 800431a:	f04f 0c0a 	mov.w	ip, #10
 800431e:	4619      	mov	r1, r3
 8004320:	3401      	adds	r4, #1
 8004322:	9305      	str	r3, [sp, #20]
 8004324:	4620      	mov	r0, r4
 8004326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800432a:	3a30      	subs	r2, #48	@ 0x30
 800432c:	2a09      	cmp	r2, #9
 800432e:	d903      	bls.n	8004338 <_vfiprintf_r+0x1cc>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0c6      	beq.n	80042c2 <_vfiprintf_r+0x156>
 8004334:	9105      	str	r1, [sp, #20]
 8004336:	e7c4      	b.n	80042c2 <_vfiprintf_r+0x156>
 8004338:	4604      	mov	r4, r0
 800433a:	2301      	movs	r3, #1
 800433c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004340:	e7f0      	b.n	8004324 <_vfiprintf_r+0x1b8>
 8004342:	ab03      	add	r3, sp, #12
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	462a      	mov	r2, r5
 8004348:	4630      	mov	r0, r6
 800434a:	4b13      	ldr	r3, [pc, #76]	@ (8004398 <_vfiprintf_r+0x22c>)
 800434c:	a904      	add	r1, sp, #16
 800434e:	f3af 8000 	nop.w
 8004352:	4607      	mov	r7, r0
 8004354:	1c78      	adds	r0, r7, #1
 8004356:	d1d6      	bne.n	8004306 <_vfiprintf_r+0x19a>
 8004358:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800435a:	07d9      	lsls	r1, r3, #31
 800435c:	d405      	bmi.n	800436a <_vfiprintf_r+0x1fe>
 800435e:	89ab      	ldrh	r3, [r5, #12]
 8004360:	059a      	lsls	r2, r3, #22
 8004362:	d402      	bmi.n	800436a <_vfiprintf_r+0x1fe>
 8004364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004366:	f7ff fde1 	bl	8003f2c <__retarget_lock_release_recursive>
 800436a:	89ab      	ldrh	r3, [r5, #12]
 800436c:	065b      	lsls	r3, r3, #25
 800436e:	f53f af1f 	bmi.w	80041b0 <_vfiprintf_r+0x44>
 8004372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004374:	e71e      	b.n	80041b4 <_vfiprintf_r+0x48>
 8004376:	ab03      	add	r3, sp, #12
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	462a      	mov	r2, r5
 800437c:	4630      	mov	r0, r6
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <_vfiprintf_r+0x22c>)
 8004380:	a904      	add	r1, sp, #16
 8004382:	f000 f87d 	bl	8004480 <_printf_i>
 8004386:	e7e4      	b.n	8004352 <_vfiprintf_r+0x1e6>
 8004388:	08004ad2 	.word	0x08004ad2
 800438c:	08004ad8 	.word	0x08004ad8
 8004390:	08004adc 	.word	0x08004adc
 8004394:	00000000 	.word	0x00000000
 8004398:	08004147 	.word	0x08004147

0800439c <_printf_common>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	4616      	mov	r6, r2
 80043a2:	4698      	mov	r8, r3
 80043a4:	688a      	ldr	r2, [r1, #8]
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	4607      	mov	r7, r0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bfb8      	it	lt
 80043ae:	4613      	movlt	r3, r2
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043b6:	460c      	mov	r4, r1
 80043b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043bc:	b10a      	cbz	r2, 80043c2 <_printf_common+0x26>
 80043be:	3301      	adds	r3, #1
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0699      	lsls	r1, r3, #26
 80043c6:	bf42      	ittt	mi
 80043c8:	6833      	ldrmi	r3, [r6, #0]
 80043ca:	3302      	addmi	r3, #2
 80043cc:	6033      	strmi	r3, [r6, #0]
 80043ce:	6825      	ldr	r5, [r4, #0]
 80043d0:	f015 0506 	ands.w	r5, r5, #6
 80043d4:	d106      	bne.n	80043e4 <_printf_common+0x48>
 80043d6:	f104 0a19 	add.w	sl, r4, #25
 80043da:	68e3      	ldr	r3, [r4, #12]
 80043dc:	6832      	ldr	r2, [r6, #0]
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	42ab      	cmp	r3, r5
 80043e2:	dc2b      	bgt.n	800443c <_printf_common+0xa0>
 80043e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	3b00      	subs	r3, #0
 80043ec:	bf18      	it	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	0692      	lsls	r2, r2, #26
 80043f2:	d430      	bmi.n	8004456 <_printf_common+0xba>
 80043f4:	4641      	mov	r1, r8
 80043f6:	4638      	mov	r0, r7
 80043f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043fc:	47c8      	blx	r9
 80043fe:	3001      	adds	r0, #1
 8004400:	d023      	beq.n	800444a <_printf_common+0xae>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	6922      	ldr	r2, [r4, #16]
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf14      	ite	ne
 800440e:	2500      	movne	r5, #0
 8004410:	6833      	ldreq	r3, [r6, #0]
 8004412:	f04f 0600 	mov.w	r6, #0
 8004416:	bf08      	it	eq
 8004418:	68e5      	ldreq	r5, [r4, #12]
 800441a:	f104 041a 	add.w	r4, r4, #26
 800441e:	bf08      	it	eq
 8004420:	1aed      	subeq	r5, r5, r3
 8004422:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004426:	bf08      	it	eq
 8004428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800442c:	4293      	cmp	r3, r2
 800442e:	bfc4      	itt	gt
 8004430:	1a9b      	subgt	r3, r3, r2
 8004432:	18ed      	addgt	r5, r5, r3
 8004434:	42b5      	cmp	r5, r6
 8004436:	d11a      	bne.n	800446e <_printf_common+0xd2>
 8004438:	2000      	movs	r0, #0
 800443a:	e008      	b.n	800444e <_printf_common+0xb2>
 800443c:	2301      	movs	r3, #1
 800443e:	4652      	mov	r2, sl
 8004440:	4641      	mov	r1, r8
 8004442:	4638      	mov	r0, r7
 8004444:	47c8      	blx	r9
 8004446:	3001      	adds	r0, #1
 8004448:	d103      	bne.n	8004452 <_printf_common+0xb6>
 800444a:	f04f 30ff 	mov.w	r0, #4294967295
 800444e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004452:	3501      	adds	r5, #1
 8004454:	e7c1      	b.n	80043da <_printf_common+0x3e>
 8004456:	2030      	movs	r0, #48	@ 0x30
 8004458:	18e1      	adds	r1, r4, r3
 800445a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004464:	4422      	add	r2, r4
 8004466:	3302      	adds	r3, #2
 8004468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800446c:	e7c2      	b.n	80043f4 <_printf_common+0x58>
 800446e:	2301      	movs	r3, #1
 8004470:	4622      	mov	r2, r4
 8004472:	4641      	mov	r1, r8
 8004474:	4638      	mov	r0, r7
 8004476:	47c8      	blx	r9
 8004478:	3001      	adds	r0, #1
 800447a:	d0e6      	beq.n	800444a <_printf_common+0xae>
 800447c:	3601      	adds	r6, #1
 800447e:	e7d9      	b.n	8004434 <_printf_common+0x98>

08004480 <_printf_i>:
 8004480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	7e0f      	ldrb	r7, [r1, #24]
 8004486:	4691      	mov	r9, r2
 8004488:	2f78      	cmp	r7, #120	@ 0x78
 800448a:	4680      	mov	r8, r0
 800448c:	460c      	mov	r4, r1
 800448e:	469a      	mov	sl, r3
 8004490:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004496:	d807      	bhi.n	80044a8 <_printf_i+0x28>
 8004498:	2f62      	cmp	r7, #98	@ 0x62
 800449a:	d80a      	bhi.n	80044b2 <_printf_i+0x32>
 800449c:	2f00      	cmp	r7, #0
 800449e:	f000 80d3 	beq.w	8004648 <_printf_i+0x1c8>
 80044a2:	2f58      	cmp	r7, #88	@ 0x58
 80044a4:	f000 80ba 	beq.w	800461c <_printf_i+0x19c>
 80044a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044b0:	e03a      	b.n	8004528 <_printf_i+0xa8>
 80044b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044b6:	2b15      	cmp	r3, #21
 80044b8:	d8f6      	bhi.n	80044a8 <_printf_i+0x28>
 80044ba:	a101      	add	r1, pc, #4	@ (adr r1, 80044c0 <_printf_i+0x40>)
 80044bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c0:	08004519 	.word	0x08004519
 80044c4:	0800452d 	.word	0x0800452d
 80044c8:	080044a9 	.word	0x080044a9
 80044cc:	080044a9 	.word	0x080044a9
 80044d0:	080044a9 	.word	0x080044a9
 80044d4:	080044a9 	.word	0x080044a9
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	080044a9 	.word	0x080044a9
 80044e0:	080044a9 	.word	0x080044a9
 80044e4:	080044a9 	.word	0x080044a9
 80044e8:	080044a9 	.word	0x080044a9
 80044ec:	0800462f 	.word	0x0800462f
 80044f0:	08004557 	.word	0x08004557
 80044f4:	080045e9 	.word	0x080045e9
 80044f8:	080044a9 	.word	0x080044a9
 80044fc:	080044a9 	.word	0x080044a9
 8004500:	08004651 	.word	0x08004651
 8004504:	080044a9 	.word	0x080044a9
 8004508:	08004557 	.word	0x08004557
 800450c:	080044a9 	.word	0x080044a9
 8004510:	080044a9 	.word	0x080044a9
 8004514:	080045f1 	.word	0x080045f1
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6032      	str	r2, [r6, #0]
 8004520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004528:	2301      	movs	r3, #1
 800452a:	e09e      	b.n	800466a <_printf_i+0x1ea>
 800452c:	6833      	ldr	r3, [r6, #0]
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	1d19      	adds	r1, r3, #4
 8004532:	6031      	str	r1, [r6, #0]
 8004534:	0606      	lsls	r6, r0, #24
 8004536:	d501      	bpl.n	800453c <_printf_i+0xbc>
 8004538:	681d      	ldr	r5, [r3, #0]
 800453a:	e003      	b.n	8004544 <_printf_i+0xc4>
 800453c:	0645      	lsls	r5, r0, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0xb8>
 8004540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004544:	2d00      	cmp	r5, #0
 8004546:	da03      	bge.n	8004550 <_printf_i+0xd0>
 8004548:	232d      	movs	r3, #45	@ 0x2d
 800454a:	426d      	negs	r5, r5
 800454c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004550:	230a      	movs	r3, #10
 8004552:	4859      	ldr	r0, [pc, #356]	@ (80046b8 <_printf_i+0x238>)
 8004554:	e011      	b.n	800457a <_printf_i+0xfa>
 8004556:	6821      	ldr	r1, [r4, #0]
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	0608      	lsls	r0, r1, #24
 800455c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004560:	d402      	bmi.n	8004568 <_printf_i+0xe8>
 8004562:	0649      	lsls	r1, r1, #25
 8004564:	bf48      	it	mi
 8004566:	b2ad      	uxthmi	r5, r5
 8004568:	2f6f      	cmp	r7, #111	@ 0x6f
 800456a:	6033      	str	r3, [r6, #0]
 800456c:	bf14      	ite	ne
 800456e:	230a      	movne	r3, #10
 8004570:	2308      	moveq	r3, #8
 8004572:	4851      	ldr	r0, [pc, #324]	@ (80046b8 <_printf_i+0x238>)
 8004574:	2100      	movs	r1, #0
 8004576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800457a:	6866      	ldr	r6, [r4, #4]
 800457c:	2e00      	cmp	r6, #0
 800457e:	bfa8      	it	ge
 8004580:	6821      	ldrge	r1, [r4, #0]
 8004582:	60a6      	str	r6, [r4, #8]
 8004584:	bfa4      	itt	ge
 8004586:	f021 0104 	bicge.w	r1, r1, #4
 800458a:	6021      	strge	r1, [r4, #0]
 800458c:	b90d      	cbnz	r5, 8004592 <_printf_i+0x112>
 800458e:	2e00      	cmp	r6, #0
 8004590:	d04b      	beq.n	800462a <_printf_i+0x1aa>
 8004592:	4616      	mov	r6, r2
 8004594:	fbb5 f1f3 	udiv	r1, r5, r3
 8004598:	fb03 5711 	mls	r7, r3, r1, r5
 800459c:	5dc7      	ldrb	r7, [r0, r7]
 800459e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045a2:	462f      	mov	r7, r5
 80045a4:	42bb      	cmp	r3, r7
 80045a6:	460d      	mov	r5, r1
 80045a8:	d9f4      	bls.n	8004594 <_printf_i+0x114>
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d10b      	bne.n	80045c6 <_printf_i+0x146>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	07df      	lsls	r7, r3, #31
 80045b2:	d508      	bpl.n	80045c6 <_printf_i+0x146>
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	6861      	ldr	r1, [r4, #4]
 80045b8:	4299      	cmp	r1, r3
 80045ba:	bfde      	ittt	le
 80045bc:	2330      	movle	r3, #48	@ 0x30
 80045be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045c6:	1b92      	subs	r2, r2, r6
 80045c8:	6122      	str	r2, [r4, #16]
 80045ca:	464b      	mov	r3, r9
 80045cc:	4621      	mov	r1, r4
 80045ce:	4640      	mov	r0, r8
 80045d0:	f8cd a000 	str.w	sl, [sp]
 80045d4:	aa03      	add	r2, sp, #12
 80045d6:	f7ff fee1 	bl	800439c <_printf_common>
 80045da:	3001      	adds	r0, #1
 80045dc:	d14a      	bne.n	8004674 <_printf_i+0x1f4>
 80045de:	f04f 30ff 	mov.w	r0, #4294967295
 80045e2:	b004      	add	sp, #16
 80045e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f043 0320 	orr.w	r3, r3, #32
 80045ee:	6023      	str	r3, [r4, #0]
 80045f0:	2778      	movs	r7, #120	@ 0x78
 80045f2:	4832      	ldr	r0, [pc, #200]	@ (80046bc <_printf_i+0x23c>)
 80045f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	6831      	ldr	r1, [r6, #0]
 80045fc:	061f      	lsls	r7, r3, #24
 80045fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004602:	d402      	bmi.n	800460a <_printf_i+0x18a>
 8004604:	065f      	lsls	r7, r3, #25
 8004606:	bf48      	it	mi
 8004608:	b2ad      	uxthmi	r5, r5
 800460a:	6031      	str	r1, [r6, #0]
 800460c:	07d9      	lsls	r1, r3, #31
 800460e:	bf44      	itt	mi
 8004610:	f043 0320 	orrmi.w	r3, r3, #32
 8004614:	6023      	strmi	r3, [r4, #0]
 8004616:	b11d      	cbz	r5, 8004620 <_printf_i+0x1a0>
 8004618:	2310      	movs	r3, #16
 800461a:	e7ab      	b.n	8004574 <_printf_i+0xf4>
 800461c:	4826      	ldr	r0, [pc, #152]	@ (80046b8 <_printf_i+0x238>)
 800461e:	e7e9      	b.n	80045f4 <_printf_i+0x174>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	f023 0320 	bic.w	r3, r3, #32
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	e7f6      	b.n	8004618 <_printf_i+0x198>
 800462a:	4616      	mov	r6, r2
 800462c:	e7bd      	b.n	80045aa <_printf_i+0x12a>
 800462e:	6833      	ldr	r3, [r6, #0]
 8004630:	6825      	ldr	r5, [r4, #0]
 8004632:	1d18      	adds	r0, r3, #4
 8004634:	6961      	ldr	r1, [r4, #20]
 8004636:	6030      	str	r0, [r6, #0]
 8004638:	062e      	lsls	r6, r5, #24
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	d501      	bpl.n	8004642 <_printf_i+0x1c2>
 800463e:	6019      	str	r1, [r3, #0]
 8004640:	e002      	b.n	8004648 <_printf_i+0x1c8>
 8004642:	0668      	lsls	r0, r5, #25
 8004644:	d5fb      	bpl.n	800463e <_printf_i+0x1be>
 8004646:	8019      	strh	r1, [r3, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	4616      	mov	r6, r2
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	e7bc      	b.n	80045ca <_printf_i+0x14a>
 8004650:	6833      	ldr	r3, [r6, #0]
 8004652:	2100      	movs	r1, #0
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	6032      	str	r2, [r6, #0]
 8004658:	681e      	ldr	r6, [r3, #0]
 800465a:	6862      	ldr	r2, [r4, #4]
 800465c:	4630      	mov	r0, r6
 800465e:	f000 f97b 	bl	8004958 <memchr>
 8004662:	b108      	cbz	r0, 8004668 <_printf_i+0x1e8>
 8004664:	1b80      	subs	r0, r0, r6
 8004666:	6060      	str	r0, [r4, #4]
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	2300      	movs	r3, #0
 800466e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004672:	e7aa      	b.n	80045ca <_printf_i+0x14a>
 8004674:	4632      	mov	r2, r6
 8004676:	4649      	mov	r1, r9
 8004678:	4640      	mov	r0, r8
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	47d0      	blx	sl
 800467e:	3001      	adds	r0, #1
 8004680:	d0ad      	beq.n	80045de <_printf_i+0x15e>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	d413      	bmi.n	80046b0 <_printf_i+0x230>
 8004688:	68e0      	ldr	r0, [r4, #12]
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	4298      	cmp	r0, r3
 800468e:	bfb8      	it	lt
 8004690:	4618      	movlt	r0, r3
 8004692:	e7a6      	b.n	80045e2 <_printf_i+0x162>
 8004694:	2301      	movs	r3, #1
 8004696:	4632      	mov	r2, r6
 8004698:	4649      	mov	r1, r9
 800469a:	4640      	mov	r0, r8
 800469c:	47d0      	blx	sl
 800469e:	3001      	adds	r0, #1
 80046a0:	d09d      	beq.n	80045de <_printf_i+0x15e>
 80046a2:	3501      	adds	r5, #1
 80046a4:	68e3      	ldr	r3, [r4, #12]
 80046a6:	9903      	ldr	r1, [sp, #12]
 80046a8:	1a5b      	subs	r3, r3, r1
 80046aa:	42ab      	cmp	r3, r5
 80046ac:	dcf2      	bgt.n	8004694 <_printf_i+0x214>
 80046ae:	e7eb      	b.n	8004688 <_printf_i+0x208>
 80046b0:	2500      	movs	r5, #0
 80046b2:	f104 0619 	add.w	r6, r4, #25
 80046b6:	e7f5      	b.n	80046a4 <_printf_i+0x224>
 80046b8:	08004ae3 	.word	0x08004ae3
 80046bc:	08004af4 	.word	0x08004af4

080046c0 <__sflush_r>:
 80046c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	0716      	lsls	r6, r2, #28
 80046c8:	4605      	mov	r5, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	d454      	bmi.n	8004778 <__sflush_r+0xb8>
 80046ce:	684b      	ldr	r3, [r1, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	dc02      	bgt.n	80046da <__sflush_r+0x1a>
 80046d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	dd48      	ble.n	800476c <__sflush_r+0xac>
 80046da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046dc:	2e00      	cmp	r6, #0
 80046de:	d045      	beq.n	800476c <__sflush_r+0xac>
 80046e0:	2300      	movs	r3, #0
 80046e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046e6:	682f      	ldr	r7, [r5, #0]
 80046e8:	6a21      	ldr	r1, [r4, #32]
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	d030      	beq.n	8004750 <__sflush_r+0x90>
 80046ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	0759      	lsls	r1, r3, #29
 80046f4:	d505      	bpl.n	8004702 <__sflush_r+0x42>
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	1ad2      	subs	r2, r2, r3
 80046fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046fc:	b10b      	cbz	r3, 8004702 <__sflush_r+0x42>
 80046fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	4628      	mov	r0, r5
 8004706:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004708:	6a21      	ldr	r1, [r4, #32]
 800470a:	47b0      	blx	r6
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	d106      	bne.n	8004720 <__sflush_r+0x60>
 8004712:	6829      	ldr	r1, [r5, #0]
 8004714:	291d      	cmp	r1, #29
 8004716:	d82b      	bhi.n	8004770 <__sflush_r+0xb0>
 8004718:	4a28      	ldr	r2, [pc, #160]	@ (80047bc <__sflush_r+0xfc>)
 800471a:	410a      	asrs	r2, r1
 800471c:	07d6      	lsls	r6, r2, #31
 800471e:	d427      	bmi.n	8004770 <__sflush_r+0xb0>
 8004720:	2200      	movs	r2, #0
 8004722:	6062      	str	r2, [r4, #4]
 8004724:	6922      	ldr	r2, [r4, #16]
 8004726:	04d9      	lsls	r1, r3, #19
 8004728:	6022      	str	r2, [r4, #0]
 800472a:	d504      	bpl.n	8004736 <__sflush_r+0x76>
 800472c:	1c42      	adds	r2, r0, #1
 800472e:	d101      	bne.n	8004734 <__sflush_r+0x74>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b903      	cbnz	r3, 8004736 <__sflush_r+0x76>
 8004734:	6560      	str	r0, [r4, #84]	@ 0x54
 8004736:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004738:	602f      	str	r7, [r5, #0]
 800473a:	b1b9      	cbz	r1, 800476c <__sflush_r+0xac>
 800473c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004740:	4299      	cmp	r1, r3
 8004742:	d002      	beq.n	800474a <__sflush_r+0x8a>
 8004744:	4628      	mov	r0, r5
 8004746:	f7ff fbf3 	bl	8003f30 <_free_r>
 800474a:	2300      	movs	r3, #0
 800474c:	6363      	str	r3, [r4, #52]	@ 0x34
 800474e:	e00d      	b.n	800476c <__sflush_r+0xac>
 8004750:	2301      	movs	r3, #1
 8004752:	4628      	mov	r0, r5
 8004754:	47b0      	blx	r6
 8004756:	4602      	mov	r2, r0
 8004758:	1c50      	adds	r0, r2, #1
 800475a:	d1c9      	bne.n	80046f0 <__sflush_r+0x30>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0c6      	beq.n	80046f0 <__sflush_r+0x30>
 8004762:	2b1d      	cmp	r3, #29
 8004764:	d001      	beq.n	800476a <__sflush_r+0xaa>
 8004766:	2b16      	cmp	r3, #22
 8004768:	d11d      	bne.n	80047a6 <__sflush_r+0xe6>
 800476a:	602f      	str	r7, [r5, #0]
 800476c:	2000      	movs	r0, #0
 800476e:	e021      	b.n	80047b4 <__sflush_r+0xf4>
 8004770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004774:	b21b      	sxth	r3, r3
 8004776:	e01a      	b.n	80047ae <__sflush_r+0xee>
 8004778:	690f      	ldr	r7, [r1, #16]
 800477a:	2f00      	cmp	r7, #0
 800477c:	d0f6      	beq.n	800476c <__sflush_r+0xac>
 800477e:	0793      	lsls	r3, r2, #30
 8004780:	bf18      	it	ne
 8004782:	2300      	movne	r3, #0
 8004784:	680e      	ldr	r6, [r1, #0]
 8004786:	bf08      	it	eq
 8004788:	694b      	ldreq	r3, [r1, #20]
 800478a:	1bf6      	subs	r6, r6, r7
 800478c:	600f      	str	r7, [r1, #0]
 800478e:	608b      	str	r3, [r1, #8]
 8004790:	2e00      	cmp	r6, #0
 8004792:	ddeb      	ble.n	800476c <__sflush_r+0xac>
 8004794:	4633      	mov	r3, r6
 8004796:	463a      	mov	r2, r7
 8004798:	4628      	mov	r0, r5
 800479a:	6a21      	ldr	r1, [r4, #32]
 800479c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80047a0:	47e0      	blx	ip
 80047a2:	2800      	cmp	r0, #0
 80047a4:	dc07      	bgt.n	80047b6 <__sflush_r+0xf6>
 80047a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ae:	f04f 30ff 	mov.w	r0, #4294967295
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b6:	4407      	add	r7, r0
 80047b8:	1a36      	subs	r6, r6, r0
 80047ba:	e7e9      	b.n	8004790 <__sflush_r+0xd0>
 80047bc:	dfbffffe 	.word	0xdfbffffe

080047c0 <_fflush_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	690b      	ldr	r3, [r1, #16]
 80047c4:	4605      	mov	r5, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	b913      	cbnz	r3, 80047d0 <_fflush_r+0x10>
 80047ca:	2500      	movs	r5, #0
 80047cc:	4628      	mov	r0, r5
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	b118      	cbz	r0, 80047da <_fflush_r+0x1a>
 80047d2:	6a03      	ldr	r3, [r0, #32]
 80047d4:	b90b      	cbnz	r3, 80047da <_fflush_r+0x1a>
 80047d6:	f7ff faa3 	bl	8003d20 <__sinit>
 80047da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f3      	beq.n	80047ca <_fflush_r+0xa>
 80047e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047e4:	07d0      	lsls	r0, r2, #31
 80047e6:	d404      	bmi.n	80047f2 <_fflush_r+0x32>
 80047e8:	0599      	lsls	r1, r3, #22
 80047ea:	d402      	bmi.n	80047f2 <_fflush_r+0x32>
 80047ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ee:	f7ff fb9c 	bl	8003f2a <__retarget_lock_acquire_recursive>
 80047f2:	4628      	mov	r0, r5
 80047f4:	4621      	mov	r1, r4
 80047f6:	f7ff ff63 	bl	80046c0 <__sflush_r>
 80047fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047fc:	4605      	mov	r5, r0
 80047fe:	07da      	lsls	r2, r3, #31
 8004800:	d4e4      	bmi.n	80047cc <_fflush_r+0xc>
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	059b      	lsls	r3, r3, #22
 8004806:	d4e1      	bmi.n	80047cc <_fflush_r+0xc>
 8004808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800480a:	f7ff fb8f 	bl	8003f2c <__retarget_lock_release_recursive>
 800480e:	e7dd      	b.n	80047cc <_fflush_r+0xc>

08004810 <__swbuf_r>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	460e      	mov	r6, r1
 8004814:	4614      	mov	r4, r2
 8004816:	4605      	mov	r5, r0
 8004818:	b118      	cbz	r0, 8004822 <__swbuf_r+0x12>
 800481a:	6a03      	ldr	r3, [r0, #32]
 800481c:	b90b      	cbnz	r3, 8004822 <__swbuf_r+0x12>
 800481e:	f7ff fa7f 	bl	8003d20 <__sinit>
 8004822:	69a3      	ldr	r3, [r4, #24]
 8004824:	60a3      	str	r3, [r4, #8]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	071a      	lsls	r2, r3, #28
 800482a:	d501      	bpl.n	8004830 <__swbuf_r+0x20>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	b943      	cbnz	r3, 8004842 <__swbuf_r+0x32>
 8004830:	4621      	mov	r1, r4
 8004832:	4628      	mov	r0, r5
 8004834:	f000 f82a 	bl	800488c <__swsetup_r>
 8004838:	b118      	cbz	r0, 8004842 <__swbuf_r+0x32>
 800483a:	f04f 37ff 	mov.w	r7, #4294967295
 800483e:	4638      	mov	r0, r7
 8004840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	6922      	ldr	r2, [r4, #16]
 8004846:	b2f6      	uxtb	r6, r6
 8004848:	1a98      	subs	r0, r3, r2
 800484a:	6963      	ldr	r3, [r4, #20]
 800484c:	4637      	mov	r7, r6
 800484e:	4283      	cmp	r3, r0
 8004850:	dc05      	bgt.n	800485e <__swbuf_r+0x4e>
 8004852:	4621      	mov	r1, r4
 8004854:	4628      	mov	r0, r5
 8004856:	f7ff ffb3 	bl	80047c0 <_fflush_r>
 800485a:	2800      	cmp	r0, #0
 800485c:	d1ed      	bne.n	800483a <__swbuf_r+0x2a>
 800485e:	68a3      	ldr	r3, [r4, #8]
 8004860:	3b01      	subs	r3, #1
 8004862:	60a3      	str	r3, [r4, #8]
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	6022      	str	r2, [r4, #0]
 800486a:	701e      	strb	r6, [r3, #0]
 800486c:	6962      	ldr	r2, [r4, #20]
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	429a      	cmp	r2, r3
 8004872:	d004      	beq.n	800487e <__swbuf_r+0x6e>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	07db      	lsls	r3, r3, #31
 8004878:	d5e1      	bpl.n	800483e <__swbuf_r+0x2e>
 800487a:	2e0a      	cmp	r6, #10
 800487c:	d1df      	bne.n	800483e <__swbuf_r+0x2e>
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	f7ff ff9d 	bl	80047c0 <_fflush_r>
 8004886:	2800      	cmp	r0, #0
 8004888:	d0d9      	beq.n	800483e <__swbuf_r+0x2e>
 800488a:	e7d6      	b.n	800483a <__swbuf_r+0x2a>

0800488c <__swsetup_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4b29      	ldr	r3, [pc, #164]	@ (8004934 <__swsetup_r+0xa8>)
 8004890:	4605      	mov	r5, r0
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	460c      	mov	r4, r1
 8004896:	b118      	cbz	r0, 80048a0 <__swsetup_r+0x14>
 8004898:	6a03      	ldr	r3, [r0, #32]
 800489a:	b90b      	cbnz	r3, 80048a0 <__swsetup_r+0x14>
 800489c:	f7ff fa40 	bl	8003d20 <__sinit>
 80048a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a4:	0719      	lsls	r1, r3, #28
 80048a6:	d422      	bmi.n	80048ee <__swsetup_r+0x62>
 80048a8:	06da      	lsls	r2, r3, #27
 80048aa:	d407      	bmi.n	80048bc <__swsetup_r+0x30>
 80048ac:	2209      	movs	r2, #9
 80048ae:	602a      	str	r2, [r5, #0]
 80048b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	e033      	b.n	8004924 <__swsetup_r+0x98>
 80048bc:	0758      	lsls	r0, r3, #29
 80048be:	d512      	bpl.n	80048e6 <__swsetup_r+0x5a>
 80048c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048c2:	b141      	cbz	r1, 80048d6 <__swsetup_r+0x4a>
 80048c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048c8:	4299      	cmp	r1, r3
 80048ca:	d002      	beq.n	80048d2 <__swsetup_r+0x46>
 80048cc:	4628      	mov	r0, r5
 80048ce:	f7ff fb2f 	bl	8003f30 <_free_r>
 80048d2:	2300      	movs	r3, #0
 80048d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	2300      	movs	r3, #0
 80048e0:	6063      	str	r3, [r4, #4]
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	f043 0308 	orr.w	r3, r3, #8
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	b94b      	cbnz	r3, 8004906 <__swsetup_r+0x7a>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048fc:	d003      	beq.n	8004906 <__swsetup_r+0x7a>
 80048fe:	4621      	mov	r1, r4
 8004900:	4628      	mov	r0, r5
 8004902:	f000 f85c 	bl	80049be <__smakebuf_r>
 8004906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490a:	f013 0201 	ands.w	r2, r3, #1
 800490e:	d00a      	beq.n	8004926 <__swsetup_r+0x9a>
 8004910:	2200      	movs	r2, #0
 8004912:	60a2      	str	r2, [r4, #8]
 8004914:	6962      	ldr	r2, [r4, #20]
 8004916:	4252      	negs	r2, r2
 8004918:	61a2      	str	r2, [r4, #24]
 800491a:	6922      	ldr	r2, [r4, #16]
 800491c:	b942      	cbnz	r2, 8004930 <__swsetup_r+0xa4>
 800491e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004922:	d1c5      	bne.n	80048b0 <__swsetup_r+0x24>
 8004924:	bd38      	pop	{r3, r4, r5, pc}
 8004926:	0799      	lsls	r1, r3, #30
 8004928:	bf58      	it	pl
 800492a:	6962      	ldrpl	r2, [r4, #20]
 800492c:	60a2      	str	r2, [r4, #8]
 800492e:	e7f4      	b.n	800491a <__swsetup_r+0x8e>
 8004930:	2000      	movs	r0, #0
 8004932:	e7f7      	b.n	8004924 <__swsetup_r+0x98>
 8004934:	20000018 	.word	0x20000018

08004938 <_sbrk_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	2300      	movs	r3, #0
 800493c:	4d05      	ldr	r5, [pc, #20]	@ (8004954 <_sbrk_r+0x1c>)
 800493e:	4604      	mov	r4, r0
 8004940:	4608      	mov	r0, r1
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	f7fc fbbe 	bl	80010c4 <_sbrk>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_sbrk_r+0x1a>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_sbrk_r+0x1a>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	200002e4 	.word	0x200002e4

08004958 <memchr>:
 8004958:	4603      	mov	r3, r0
 800495a:	b510      	push	{r4, lr}
 800495c:	b2c9      	uxtb	r1, r1
 800495e:	4402      	add	r2, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	4618      	mov	r0, r3
 8004964:	d101      	bne.n	800496a <memchr+0x12>
 8004966:	2000      	movs	r0, #0
 8004968:	e003      	b.n	8004972 <memchr+0x1a>
 800496a:	7804      	ldrb	r4, [r0, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	428c      	cmp	r4, r1
 8004970:	d1f6      	bne.n	8004960 <memchr+0x8>
 8004972:	bd10      	pop	{r4, pc}

08004974 <__swhatbuf_r>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	460c      	mov	r4, r1
 8004978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800497c:	4615      	mov	r5, r2
 800497e:	2900      	cmp	r1, #0
 8004980:	461e      	mov	r6, r3
 8004982:	b096      	sub	sp, #88	@ 0x58
 8004984:	da0c      	bge.n	80049a0 <__swhatbuf_r+0x2c>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	2100      	movs	r1, #0
 800498a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800498e:	bf14      	ite	ne
 8004990:	2340      	movne	r3, #64	@ 0x40
 8004992:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004996:	2000      	movs	r0, #0
 8004998:	6031      	str	r1, [r6, #0]
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	b016      	add	sp, #88	@ 0x58
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	466a      	mov	r2, sp
 80049a2:	f000 f849 	bl	8004a38 <_fstat_r>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	dbed      	blt.n	8004986 <__swhatbuf_r+0x12>
 80049aa:	9901      	ldr	r1, [sp, #4]
 80049ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80049b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80049b4:	4259      	negs	r1, r3
 80049b6:	4159      	adcs	r1, r3
 80049b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049bc:	e7eb      	b.n	8004996 <__swhatbuf_r+0x22>

080049be <__smakebuf_r>:
 80049be:	898b      	ldrh	r3, [r1, #12]
 80049c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049c2:	079d      	lsls	r5, r3, #30
 80049c4:	4606      	mov	r6, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	d507      	bpl.n	80049da <__smakebuf_r+0x1c>
 80049ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	2301      	movs	r3, #1
 80049d4:	6163      	str	r3, [r4, #20]
 80049d6:	b003      	add	sp, #12
 80049d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049da:	466a      	mov	r2, sp
 80049dc:	ab01      	add	r3, sp, #4
 80049de:	f7ff ffc9 	bl	8004974 <__swhatbuf_r>
 80049e2:	9f00      	ldr	r7, [sp, #0]
 80049e4:	4605      	mov	r5, r0
 80049e6:	4639      	mov	r1, r7
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff fb0b 	bl	8004004 <_malloc_r>
 80049ee:	b948      	cbnz	r0, 8004a04 <__smakebuf_r+0x46>
 80049f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f4:	059a      	lsls	r2, r3, #22
 80049f6:	d4ee      	bmi.n	80049d6 <__smakebuf_r+0x18>
 80049f8:	f023 0303 	bic.w	r3, r3, #3
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	e7e2      	b.n	80049ca <__smakebuf_r+0xc>
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0e:	81a3      	strh	r3, [r4, #12]
 8004a10:	9b01      	ldr	r3, [sp, #4]
 8004a12:	6020      	str	r0, [r4, #0]
 8004a14:	b15b      	cbz	r3, 8004a2e <__smakebuf_r+0x70>
 8004a16:	4630      	mov	r0, r6
 8004a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a1c:	f000 f81e 	bl	8004a5c <_isatty_r>
 8004a20:	b128      	cbz	r0, 8004a2e <__smakebuf_r+0x70>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	f023 0303 	bic.w	r3, r3, #3
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	431d      	orrs	r5, r3
 8004a32:	81a5      	strh	r5, [r4, #12]
 8004a34:	e7cf      	b.n	80049d6 <__smakebuf_r+0x18>
	...

08004a38 <_fstat_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4d06      	ldr	r5, [pc, #24]	@ (8004a58 <_fstat_r+0x20>)
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	f7fc fb17 	bl	8001078 <_fstat>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	d102      	bne.n	8004a54 <_fstat_r+0x1c>
 8004a4e:	682b      	ldr	r3, [r5, #0]
 8004a50:	b103      	cbz	r3, 8004a54 <_fstat_r+0x1c>
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	bf00      	nop
 8004a58:	200002e4 	.word	0x200002e4

08004a5c <_isatty_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4d05      	ldr	r5, [pc, #20]	@ (8004a78 <_isatty_r+0x1c>)
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	f7fc fb15 	bl	8001096 <_isatty>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_isatty_r+0x1a>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_isatty_r+0x1a>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	200002e4 	.word	0x200002e4

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
